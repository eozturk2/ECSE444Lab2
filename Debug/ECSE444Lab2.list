
ECSE444Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003684  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003880  08003880  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003880  08003880  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003880  08003880  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003884  08003884  00013884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08003894  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08003894  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009160  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001701  00000000  00000000  0002919c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  0002a8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f0f  00000000  00000000  0002b9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009490  00000000  00000000  000558e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107bfd  00000000  00000000  0005ed77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166974  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d0  00000000  00000000  001669c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003828 	.word	0x08003828

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003828 	.word	0x08003828

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	ed2d 8b02 	vpush	{d8}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000206:	f000 faa2 	bl	800074e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020a:	f000 f895 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020e:	f000 f97d 	bl	800050c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000212:	f000 f8e3 	bl	80003dc <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float CALIBRATION_CONSTANT = (float)(TS_CAL2_TEMP - TS_CAL1_TEMP) / (float)(TS_CAL2 - TS_CAL1);
 8000216:	4b42      	ldr	r3, [pc, #264]	; (8000320 <main+0x124>)
 8000218:	881b      	ldrh	r3, [r3, #0]
 800021a:	461a      	mov	r2, r3
 800021c:	4b41      	ldr	r3, [pc, #260]	; (8000324 <main+0x128>)
 800021e:	881b      	ldrh	r3, [r3, #0]
 8000220:	1ad3      	subs	r3, r2, r3
 8000222:	ee07 3a90 	vmov	s15, r3
 8000226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800022a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8000328 <main+0x12c>
 800022e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000232:	edc7 7a04 	vstr	s15, [r7, #16]
  while (1)
  {
    /* USER CODE END WHILE */
  uint8_t status = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	73fb      	strb	r3, [r7, #15]
  float vref_ratio=1, vref, temperature=0;
 800023a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800023e:	617b      	str	r3, [r7, #20]
 8000240:	f04f 0300 	mov.w	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value;

  while (1)
  {

	status = HAL_GPIO_ReadPin(myButton_GPIO_Port, myButton_Pin);
 8000246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024a:	4838      	ldr	r0, [pc, #224]	; (800032c <main+0x130>)
 800024c:	f001 fe14 	bl	8001e78 <HAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	73fb      	strb	r3, [r7, #15]
	if(status == 0)
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d131      	bne.n	80002be <main+0xc2>
	{
		HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_SET);
 800025a:	2201      	movs	r2, #1
 800025c:	2120      	movs	r1, #32
 800025e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000262:	f001 fe21 	bl	8001ea8 <HAL_GPIO_WritePin>
		toggleTemperature(1);
 8000266:	2001      	movs	r0, #1
 8000268:	f000 f91c 	bl	80004a4 <toggleTemperature>
		HAL_ADC_Start(&hadc1);
 800026c:	4830      	ldr	r0, [pc, #192]	; (8000330 <main+0x134>)
 800026e:	f000 fe09 	bl	8000e84 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000272:	f04f 31ff 	mov.w	r1, #4294967295
 8000276:	482e      	ldr	r0, [pc, #184]	; (8000330 <main+0x134>)
 8000278:	f000 fe67 	bl	8000f4a <HAL_ADC_PollForConversion>
	 	adc_value = HAL_ADC_GetValue(&hadc1);
 800027c:	482c      	ldr	r0, [pc, #176]	; (8000330 <main+0x134>)
 800027e:	f000 fef3 	bl	8001068 <HAL_ADC_GetValue>
 8000282:	4603      	mov	r3, r0
 8000284:	80fb      	strh	r3, [r7, #6]
		temperature = CALIBRATION_CONSTANT * (float)(adc_value * vref_ratio - TS_CAL1) + 30;
 8000286:	88fb      	ldrh	r3, [r7, #6]
 8000288:	ee07 3a90 	vmov	s15, r3
 800028c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000290:	edd7 7a05 	vldr	s15, [r7, #20]
 8000294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000298:	4b22      	ldr	r3, [pc, #136]	; (8000324 <main+0x128>)
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	ee07 3a90 	vmov	s15, r3
 80002a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80002a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80002ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002b0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80002b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80002b8:	edc7 7a02 	vstr	s15, [r7, #8]
 80002bc:	e7c3      	b.n	8000246 <main+0x4a>

	}else{
		HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	2120      	movs	r1, #32
 80002c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c6:	f001 fdef 	bl	8001ea8 <HAL_GPIO_WritePin>
		toggleTemperature(0);
 80002ca:	2000      	movs	r0, #0
 80002cc:	f000 f8ea 	bl	80004a4 <toggleTemperature>
		HAL_ADC_Start(&hadc1);
 80002d0:	4817      	ldr	r0, [pc, #92]	; (8000330 <main+0x134>)
 80002d2:	f000 fdd7 	bl	8000e84 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002d6:	f04f 31ff 	mov.w	r1, #4294967295
 80002da:	4815      	ldr	r0, [pc, #84]	; (8000330 <main+0x134>)
 80002dc:	f000 fe35 	bl	8000f4a <HAL_ADC_PollForConversion>
	 	adc_value = HAL_ADC_GetValue(&hadc1);
 80002e0:	4813      	ldr	r0, [pc, #76]	; (8000330 <main+0x134>)
 80002e2:	f000 fec1 	bl	8001068 <HAL_ADC_GetValue>
 80002e6:	4603      	mov	r3, r0
 80002e8:	80fb      	strh	r3, [r7, #6]
		vref_ratio = (float)VREFINT / (float)HAL_ADC_GetValue(&hadc1);
 80002ea:	4b12      	ldr	r3, [pc, #72]	; (8000334 <main+0x138>)
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	ee07 3a90 	vmov	s15, r3
 80002f2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80002f6:	480e      	ldr	r0, [pc, #56]	; (8000330 <main+0x134>)
 80002f8:	f000 feb6 	bl	8001068 <HAL_ADC_GetValue>
 80002fc:	ee07 0a90 	vmov	s15, r0
 8000300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000304:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000308:	edc7 7a05 	vstr	s15, [r7, #20]
		vref = vref_ratio * 3;
 800030c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000310:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000318:	edc7 7a00 	vstr	s15, [r7]
	status = HAL_GPIO_ReadPin(myButton_GPIO_Port, myButton_Pin);
 800031c:	e793      	b.n	8000246 <main+0x4a>
 800031e:	bf00      	nop
 8000320:	1fff75ca 	.word	0x1fff75ca
 8000324:	1fff75a8 	.word	0x1fff75a8
 8000328:	42c80000 	.word	0x42c80000
 800032c:	48000800 	.word	0x48000800
 8000330:	20000028 	.word	0x20000028
 8000334:	1fff75aa 	.word	0x1fff75aa

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b096      	sub	sp, #88	; 0x58
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0314 	add.w	r3, r7, #20
 8000342:	2244      	movs	r2, #68	; 0x44
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f003 fa66 	bl	8003818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	463b      	mov	r3, r7
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800035a:	2000      	movs	r0, #0
 800035c:	f001 fddc 	bl	8001f18 <HAL_PWREx_ControlVoltageScaling>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000366:	f000 f91f 	bl	80005a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800036a:	2310      	movs	r3, #16
 800036c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800036e:	2301      	movs	r3, #1
 8000370:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000376:	2360      	movs	r3, #96	; 0x60
 8000378:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037a:	2302      	movs	r3, #2
 800037c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800037e:	2301      	movs	r3, #1
 8000380:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000382:	2301      	movs	r3, #1
 8000384:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000386:	233c      	movs	r3, #60	; 0x3c
 8000388:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800038a:	2302      	movs	r3, #2
 800038c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800038e:	2302      	movs	r3, #2
 8000390:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000392:	2302      	movs	r3, #2
 8000394:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	4618      	mov	r0, r3
 800039c:	f001 fe60 	bl	8002060 <HAL_RCC_OscConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003a6:	f000 f8ff 	bl	80005a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003aa:	230f      	movs	r3, #15
 80003ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ae:	2303      	movs	r3, #3
 80003b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003be:	463b      	mov	r3, r7
 80003c0:	2105      	movs	r1, #5
 80003c2:	4618      	mov	r0, r3
 80003c4:	f002 fa66 	bl	8002894 <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ce:	f000 f8eb 	bl	80005a8 <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3758      	adds	r7, #88	; 0x58
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003e2:	463b      	mov	r3, r7
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
 80003f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003f2:	4b29      	ldr	r3, [pc, #164]	; (8000498 <MX_ADC1_Init+0xbc>)
 80003f4:	4a29      	ldr	r2, [pc, #164]	; (800049c <MX_ADC1_Init+0xc0>)
 80003f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003f8:	4b27      	ldr	r3, [pc, #156]	; (8000498 <MX_ADC1_Init+0xbc>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003fe:	4b26      	ldr	r3, [pc, #152]	; (8000498 <MX_ADC1_Init+0xbc>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000404:	4b24      	ldr	r3, [pc, #144]	; (8000498 <MX_ADC1_Init+0xbc>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800040a:	4b23      	ldr	r3, [pc, #140]	; (8000498 <MX_ADC1_Init+0xbc>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000410:	4b21      	ldr	r3, [pc, #132]	; (8000498 <MX_ADC1_Init+0xbc>)
 8000412:	2204      	movs	r2, #4
 8000414:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000416:	4b20      	ldr	r3, [pc, #128]	; (8000498 <MX_ADC1_Init+0xbc>)
 8000418:	2200      	movs	r2, #0
 800041a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800041c:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <MX_ADC1_Init+0xbc>)
 800041e:	2200      	movs	r2, #0
 8000420:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000422:	4b1d      	ldr	r3, [pc, #116]	; (8000498 <MX_ADC1_Init+0xbc>)
 8000424:	2201      	movs	r2, #1
 8000426:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000428:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <MX_ADC1_Init+0xbc>)
 800042a:	2200      	movs	r2, #0
 800042c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000430:	4b19      	ldr	r3, [pc, #100]	; (8000498 <MX_ADC1_Init+0xbc>)
 8000432:	2200      	movs	r2, #0
 8000434:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000436:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MX_ADC1_Init+0xbc>)
 8000438:	2200      	movs	r2, #0
 800043a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800043c:	4b16      	ldr	r3, [pc, #88]	; (8000498 <MX_ADC1_Init+0xbc>)
 800043e:	2200      	movs	r2, #0
 8000440:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <MX_ADC1_Init+0xbc>)
 8000446:	2200      	movs	r2, #0
 8000448:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <MX_ADC1_Init+0xbc>)
 800044c:	2200      	movs	r2, #0
 800044e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000452:	4811      	ldr	r0, [pc, #68]	; (8000498 <MX_ADC1_Init+0xbc>)
 8000454:	f000 fbca 	bl	8000bec <HAL_ADC_Init>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800045e:	f000 f8a3 	bl	80005a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <MX_ADC1_Init+0xc4>)
 8000464:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000466:	2306      	movs	r3, #6
 8000468:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800046a:	2302      	movs	r3, #2
 800046c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800046e:	237f      	movs	r3, #127	; 0x7f
 8000470:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000472:	2304      	movs	r3, #4
 8000474:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800047a:	463b      	mov	r3, r7
 800047c:	4619      	mov	r1, r3
 800047e:	4806      	ldr	r0, [pc, #24]	; (8000498 <MX_ADC1_Init+0xbc>)
 8000480:	f000 fe00 	bl	8001084 <HAL_ADC_ConfigChannel>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800048a:	f000 f88d 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800048e:	bf00      	nop
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000028 	.word	0x20000028
 800049c:	50040000 	.word	0x50040000
 80004a0:	80000001 	.word	0x80000001

080004a4 <toggleTemperature>:

static void toggleTemperature(int temperature)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80004ac:	f107 0308 	add.w	r3, r7, #8
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
 80004ba:	611a      	str	r2, [r3, #16]
 80004bc:	615a      	str	r2, [r3, #20]
	if(temperature)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d002      	beq.n	80004ca <toggleTemperature+0x26>
	{
		sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <toggleTemperature+0x5c>)
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	e001      	b.n	80004ce <toggleTemperature+0x2a>
	}else{
		sConfig.Channel = ADC_CHANNEL_VREFINT;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <toggleTemperature+0x60>)
 80004cc:	60bb      	str	r3, [r7, #8]
	}

	sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ce:	2306      	movs	r3, #6
 80004d0:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80004d2:	2302      	movs	r3, #2
 80004d4:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004d6:	237f      	movs	r3, #127	; 0x7f
 80004d8:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004da:	2304      	movs	r3, #4
 80004dc:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	4619      	mov	r1, r3
 80004e8:	4807      	ldr	r0, [pc, #28]	; (8000508 <toggleTemperature+0x64>)
 80004ea:	f000 fdcb 	bl	8001084 <HAL_ADC_ConfigChannel>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <toggleTemperature+0x54>
	{
		Error_Handler();
 80004f4:	f000 f858 	bl	80005a8 <Error_Handler>
	}
}
 80004f8:	bf00      	nop
 80004fa:	3720      	adds	r7, #32
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	c7520000 	.word	0xc7520000
 8000504:	80000001 	.word	0x80000001
 8000508:	20000028 	.word	0x20000028

0800050c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_GPIO_Init+0x94>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	4a1e      	ldr	r2, [pc, #120]	; (80005a0 <MX_GPIO_Init+0x94>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <MX_GPIO_Init+0x94>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <MX_GPIO_Init+0x94>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	4a18      	ldr	r2, [pc, #96]	; (80005a0 <MX_GPIO_Init+0x94>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000546:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <MX_GPIO_Init+0x94>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2120      	movs	r1, #32
 8000556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055a:	f001 fca5 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 800055e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	480c      	ldr	r0, [pc, #48]	; (80005a4 <MX_GPIO_Init+0x98>)
 8000574:	f001 faee 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed_Pin */
  GPIO_InitStruct.Pin = myLed_Pin;
 8000578:	2320      	movs	r3, #32
 800057a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057c:	2301      	movs	r3, #1
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(myLed_GPIO_Port, &GPIO_InitStruct);
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	4619      	mov	r1, r3
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f001 fadf 	bl	8001b54 <HAL_GPIO_Init>

}
 8000596:	bf00      	nop
 8000598:	3720      	adds	r7, #32
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000
 80005a4:	48000800 	.word	0x48000800

080005a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ac:	b672      	cpsid	i
}
 80005ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <Error_Handler+0x8>
	...

080005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_MspInit+0x44>)
 80005bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <HAL_MspInit+0x44>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6613      	str	r3, [r2, #96]	; 0x60
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_MspInit+0x44>)
 80005c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_MspInit+0x44>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	4a08      	ldr	r2, [pc, #32]	; (80005f8 <HAL_MspInit+0x44>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	6593      	str	r3, [r2, #88]	; 0x58
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_MspInit+0x44>)
 80005e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000

080005fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b0a8      	sub	sp, #160	; 0xa0
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2294      	movs	r2, #148	; 0x94
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f003 f903 	bl	8003818 <memset>
  if(hadc->Instance==ADC1)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a19      	ldr	r2, [pc, #100]	; (800067c <HAL_ADC_MspInit+0x80>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d12b      	bne.n	8000674 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800061c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000620:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000622:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800062a:	2301      	movs	r3, #1
 800062c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800062e:	2301      	movs	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000632:	2318      	movs	r3, #24
 8000634:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000642:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fba7 	bl	8002da0 <HAL_RCCEx_PeriphCLKConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000658:	f7ff ffa6 	bl	80005a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_ADC_MspInit+0x84>)
 800065e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_ADC_MspInit+0x84>)
 8000662:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000666:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_ADC_MspInit+0x84>)
 800066a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000674:	bf00      	nop
 8000676:	37a0      	adds	r7, #160	; 0xa0
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	50040000 	.word	0x50040000
 8000680:	40021000 	.word	0x40021000

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <NMI_Handler+0x4>

0800068a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <MemManage_Handler+0x4>

08000696 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d0:	f000 f892 	bl	80007f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <SystemInit+0x20>)
 80006de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006e2:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <SystemInit+0x20>)
 80006e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000734 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000700:	f7ff ffea 	bl	80006d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <LoopForever+0x6>)
  ldr r1, =_edata
 8000706:	490d      	ldr	r1, [pc, #52]	; (800073c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000708:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <LoopForever+0xe>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800070c:	e002      	b.n	8000714 <LoopCopyDataInit>

0800070e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000712:	3304      	adds	r3, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000718:	d3f9      	bcc.n	800070e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <LoopForever+0x12>)
  ldr r4, =_ebss
 800071c:	4c0a      	ldr	r4, [pc, #40]	; (8000748 <LoopForever+0x16>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000720:	e001      	b.n	8000726 <LoopFillZerobss>

08000722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000724:	3204      	adds	r2, #4

08000726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000728:	d3fb      	bcc.n	8000722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800072a:	f003 f851 	bl	80037d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800072e:	f7ff fd65 	bl	80001fc <main>

08000732 <LoopForever>:

LoopForever:
    b LoopForever
 8000732:	e7fe      	b.n	8000732 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000734:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800073c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000740:	08003888 	.word	0x08003888
  ldr r2, =_sbss
 8000744:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000748:	20000094 	.word	0x20000094

0800074c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC1_IRQHandler>

0800074e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000754:	2300      	movs	r3, #0
 8000756:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000758:	2003      	movs	r0, #3
 800075a:	f001 f9c7 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800075e:	2000      	movs	r0, #0
 8000760:	f000 f80e 	bl	8000780 <HAL_InitTick>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	e001      	b.n	8000774 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000770:	f7ff ff20 	bl	80005b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000774:	79fb      	ldrb	r3, [r7, #7]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000788:	2300      	movs	r3, #0
 800078a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <HAL_InitTick+0x6c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d023      	beq.n	80007dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <HAL_InitTick+0x70>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <HAL_InitTick+0x6c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 f9c5 	bl	8001b3a <HAL_SYSTICK_Config>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d10f      	bne.n	80007d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b0f      	cmp	r3, #15
 80007ba:	d809      	bhi.n	80007d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007bc:	2200      	movs	r2, #0
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f001 f99d 	bl	8001b02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007c8:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <HAL_InitTick+0x74>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
 80007ce:	e007      	b.n	80007e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	73fb      	strb	r3, [r7, #15]
 80007d4:	e004      	b.n	80007e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	73fb      	strb	r3, [r7, #15]
 80007da:	e001      	b.n	80007e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007dc:	2301      	movs	r3, #1
 80007de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000004 	.word	0x20000004

080007f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_IncTick+0x20>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_IncTick+0x24>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <HAL_IncTick+0x24>)
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008
 800081c:	20000090 	.word	0x20000090

08000820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <HAL_GetTick+0x14>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000090 	.word	0x20000090

08000838 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	431a      	orrs	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	609a      	str	r2, [r3, #8]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	431a      	orrs	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	609a      	str	r2, [r3, #8]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3360      	adds	r3, #96	; 0x60
 80008b2:	461a      	mov	r2, r3
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <LL_ADC_SetOffset+0x44>)
 80008c2:	4013      	ands	r3, r2
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	430a      	orrs	r2, r1
 80008ce:	4313      	orrs	r3, r2
 80008d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80008d8:	bf00      	nop
 80008da:	371c      	adds	r7, #28
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	03fff000 	.word	0x03fff000

080008e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3360      	adds	r3, #96	; 0x60
 80008f6:	461a      	mov	r2, r3
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4413      	add	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000908:	4618      	mov	r0, r3
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000914:	b480      	push	{r7}
 8000916:	b087      	sub	sp, #28
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	3360      	adds	r3, #96	; 0x60
 8000924:	461a      	mov	r2, r3
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4413      	add	r3, r2
 800092c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	431a      	orrs	r2, r3
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800093e:	bf00      	nop
 8000940:	371c      	adds	r7, #28
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	431a      	orrs	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	615a      	str	r2, [r3, #20]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000980:	2b00      	cmp	r3, #0
 8000982:	d101      	bne.n	8000988 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000984:	2301      	movs	r3, #1
 8000986:	e000      	b.n	800098a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000996:	b480      	push	{r7}
 8000998:	b087      	sub	sp, #28
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3330      	adds	r3, #48	; 0x30
 80009a6:	461a      	mov	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	f003 030c 	and.w	r3, r3, #12
 80009b2:	4413      	add	r3, r2
 80009b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	f003 031f 	and.w	r3, r3, #31
 80009c0:	211f      	movs	r1, #31
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	401a      	ands	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	0e9b      	lsrs	r3, r3, #26
 80009ce:	f003 011f 	and.w	r1, r3, #31
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	f003 031f 	and.w	r3, r3, #31
 80009d8:	fa01 f303 	lsl.w	r3, r1, r3
 80009dc:	431a      	orrs	r2, r3
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009e2:	bf00      	nop
 80009e4:	371c      	adds	r7, #28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b087      	sub	sp, #28
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	3314      	adds	r3, #20
 80009fe:	461a      	mov	r2, r3
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	0e5b      	lsrs	r3, r3, #25
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	4413      	add	r3, r2
 8000a0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	0d1b      	lsrs	r3, r3, #20
 8000a16:	f003 031f 	and.w	r3, r3, #31
 8000a1a:	2107      	movs	r1, #7
 8000a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	401a      	ands	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	0d1b      	lsrs	r3, r3, #20
 8000a28:	f003 031f 	and.w	r3, r3, #31
 8000a2c:	6879      	ldr	r1, [r7, #4]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	431a      	orrs	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000a38:	bf00      	nop
 8000a3a:	371c      	adds	r7, #28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	401a      	ands	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0318 	and.w	r3, r3, #24
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000a68:	40d9      	lsrs	r1, r3
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	400b      	ands	r3, r1
 8000a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a72:	431a      	orrs	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	0007ffff 	.word	0x0007ffff

08000a8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	6093      	str	r3, [r2, #8]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ac4:	d101      	bne.n	8000aca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000ae8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000aec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b14:	d101      	bne.n	8000b1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000b16:	2301      	movs	r3, #1
 8000b18:	e000      	b.n	8000b1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b3c:	f043 0201 	orr.w	r2, r3, #1
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d101      	bne.n	8000b68 <LL_ADC_IsEnabled+0x18>
 8000b64:	2301      	movs	r3, #1
 8000b66:	e000      	b.n	8000b6a <LL_ADC_IsEnabled+0x1a>
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b8a:	f043 0204 	orr.w	r2, r3, #4
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	d101      	bne.n	8000bb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	2b08      	cmp	r3, #8
 8000bd6:	d101      	bne.n	8000bdc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e000      	b.n	8000bde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d101      	bne.n	8000c06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e12f      	b.n	8000e66 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d109      	bne.n	8000c28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff fcf1 	bl	80005fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff3f 	bl	8000ab0 <LL_ADC_IsDeepPowerDownEnabled>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d004      	beq.n	8000c42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff25 	bl	8000a8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff5a 	bl	8000b00 <LL_ADC_IsInternalRegulatorEnabled>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d115      	bne.n	8000c7e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff3e 	bl	8000ad8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000c5c:	4b84      	ldr	r3, [pc, #528]	; (8000e70 <HAL_ADC_Init+0x284>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	099b      	lsrs	r3, r3, #6
 8000c62:	4a84      	ldr	r2, [pc, #528]	; (8000e74 <HAL_ADC_Init+0x288>)
 8000c64:	fba2 2303 	umull	r2, r3, r2, r3
 8000c68:	099b      	lsrs	r3, r3, #6
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c70:	e002      	b.n	8000c78 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f9      	bne.n	8000c72 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ff3c 	bl	8000b00 <LL_ADC_IsInternalRegulatorEnabled>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10d      	bne.n	8000caa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c92:	f043 0210 	orr.w	r2, r3, #16
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c9e:	f043 0201 	orr.w	r2, r3, #1
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff75 	bl	8000b9e <LL_ADC_REG_IsConversionOngoing>
 8000cb4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cba:	f003 0310 	and.w	r3, r3, #16
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 80c8 	bne.w	8000e54 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 80c4 	bne.w	8000e54 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cd4:	f043 0202 	orr.w	r2, r3, #2
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff35 	bl	8000b50 <LL_ADC_IsEnabled>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d10b      	bne.n	8000d04 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000cec:	4862      	ldr	r0, [pc, #392]	; (8000e78 <HAL_ADC_Init+0x28c>)
 8000cee:	f7ff ff2f 	bl	8000b50 <LL_ADC_IsEnabled>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d105      	bne.n	8000d04 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	485f      	ldr	r0, [pc, #380]	; (8000e7c <HAL_ADC_Init+0x290>)
 8000d00:	f7ff fd9a 	bl	8000838 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7e5b      	ldrb	r3, [r3, #25]
 8000d08:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d0e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000d14:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000d1a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d22:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d106      	bne.n	8000d40 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d36:	3b01      	subs	r3, #1
 8000d38:	045b      	lsls	r3, r3, #17
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d009      	beq.n	8000d5c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	4b47      	ldr	r3, [pc, #284]	; (8000e80 <HAL_ADC_Init+0x294>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	6812      	ldr	r2, [r2, #0]
 8000d6a:	69b9      	ldr	r1, [r7, #24]
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff12 	bl	8000b9e <LL_ADC_REG_IsConversionOngoing>
 8000d7a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff1f 	bl	8000bc4 <LL_ADC_INJ_IsConversionOngoing>
 8000d86:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d140      	bne.n	8000e10 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d13d      	bne.n	8000e10 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7e1b      	ldrb	r3, [r3, #24]
 8000d9c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d9e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000da6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000db6:	f023 0306 	bic.w	r3, r3, #6
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	69b9      	ldr	r1, [r7, #24]
 8000dc0:	430b      	orrs	r3, r1
 8000dc2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d118      	bne.n	8000e00 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000dd8:	f023 0304 	bic.w	r3, r3, #4
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000de4:	4311      	orrs	r1, r2
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000dea:	4311      	orrs	r1, r2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000df0:	430a      	orrs	r2, r1
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f042 0201 	orr.w	r2, r2, #1
 8000dfc:	611a      	str	r2, [r3, #16]
 8000dfe:	e007      	b.n	8000e10 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	691a      	ldr	r2, [r3, #16]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 0201 	bic.w	r2, r2, #1
 8000e0e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d10c      	bne.n	8000e32 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f023 010f 	bic.w	r1, r3, #15
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	1e5a      	subs	r2, r3, #1
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e30:	e007      	b.n	8000e42 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 020f 	bic.w	r2, r2, #15
 8000e40:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	f023 0303 	bic.w	r3, r3, #3
 8000e4a:	f043 0201 	orr.w	r2, r3, #1
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	659a      	str	r2, [r3, #88]	; 0x58
 8000e52:	e007      	b.n	8000e64 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e58:	f043 0210 	orr.w	r2, r3, #16
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e64:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000
 8000e74:	053e2d63 	.word	0x053e2d63
 8000e78:	50040000 	.word	0x50040000
 8000e7c:	50040300 	.word	0x50040300
 8000e80:	fff0c007 	.word	0xfff0c007

08000e84 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fe84 	bl	8000b9e <LL_ADC_REG_IsConversionOngoing>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d14f      	bne.n	8000f3c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d101      	bne.n	8000eaa <HAL_ADC_Start+0x26>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e04b      	b.n	8000f42 <HAL_ADC_Start+0xbe>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2201      	movs	r2, #1
 8000eae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 fce2 	bl	800187c <ADC_Enable>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d137      	bne.n	8000f32 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000eca:	f023 0301 	bic.w	r3, r3, #1
 8000ece:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ee2:	d106      	bne.n	8000ef2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ee8:	f023 0206 	bic.w	r2, r3, #6
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	65da      	str	r2, [r3, #92]	; 0x5c
 8000ef0:	e002      	b.n	8000ef8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	221c      	movs	r2, #28
 8000efe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d007      	beq.n	8000f26 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fe23 	bl	8000b76 <LL_ADC_REG_StartConversion>
 8000f30:	e006      	b.n	8000f40 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000f3a:	e001      	b.n	8000f40 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	d102      	bne.n	8000f62 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	e010      	b.n	8000f84 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d007      	beq.n	8000f80 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f74:	f043 0220 	orr.w	r2, r3, #32
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e06f      	b.n	8001060 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000f80:	2304      	movs	r3, #4
 8000f82:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f84:	f7ff fc4c 	bl	8000820 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f8a:	e021      	b.n	8000fd0 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f92:	d01d      	beq.n	8000fd0 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000f94:	f7ff fc44 	bl	8000820 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	683a      	ldr	r2, [r7, #0]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d302      	bcc.n	8000faa <HAL_ADC_PollForConversion+0x60>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d112      	bne.n	8000fd0 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10b      	bne.n	8000fd0 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbc:	f043 0204 	orr.w	r2, r3, #4
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e047      	b.n	8001060 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0d6      	beq.n	8000f8c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fcbe 	bl	8000970 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d01c      	beq.n	8001034 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7e5b      	ldrb	r3, [r3, #25]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d118      	bne.n	8001034 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	2b08      	cmp	r3, #8
 800100e:	d111      	bne.n	8001034 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001014:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d105      	bne.n	8001034 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102c:	f043 0201 	orr.w	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	2b08      	cmp	r3, #8
 8001040:	d104      	bne.n	800104c <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2208      	movs	r2, #8
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	e008      	b.n	800105e <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d103      	bne.n	800105e <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	220c      	movs	r2, #12
 800105c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0b6      	sub	sp, #216	; 0xd8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x22>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e3d5      	b.n	8001852 <HAL_ADC_ConfigChannel+0x7ce>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fd73 	bl	8000b9e <LL_ADC_REG_IsConversionOngoing>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 83ba 	bne.w	8001834 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b05      	cmp	r3, #5
 80010c6:	d824      	bhi.n	8001112 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	3b02      	subs	r3, #2
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d81b      	bhi.n	800110a <HAL_ADC_ConfigChannel+0x86>
 80010d2:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <HAL_ADC_ConfigChannel+0x54>)
 80010d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d8:	080010e9 	.word	0x080010e9
 80010dc:	080010f1 	.word	0x080010f1
 80010e0:	080010f9 	.word	0x080010f9
 80010e4:	08001101 	.word	0x08001101
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	220c      	movs	r2, #12
 80010ec:	605a      	str	r2, [r3, #4]
          break;
 80010ee:	e011      	b.n	8001114 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2212      	movs	r2, #18
 80010f4:	605a      	str	r2, [r3, #4]
          break;
 80010f6:	e00d      	b.n	8001114 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2218      	movs	r2, #24
 80010fc:	605a      	str	r2, [r3, #4]
          break;
 80010fe:	e009      	b.n	8001114 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001106:	605a      	str	r2, [r3, #4]
          break;
 8001108:	e004      	b.n	8001114 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	2206      	movs	r2, #6
 800110e:	605a      	str	r2, [r3, #4]
          break;
 8001110:	e000      	b.n	8001114 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001112:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	6859      	ldr	r1, [r3, #4]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	f7ff fc38 	bl	8000996 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fd37 	bl	8000b9e <LL_ADC_REG_IsConversionOngoing>
 8001130:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fd43 	bl	8000bc4 <LL_ADC_INJ_IsConversionOngoing>
 800113e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001142:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001146:	2b00      	cmp	r3, #0
 8001148:	f040 81c1 	bne.w	80014ce <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800114c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001150:	2b00      	cmp	r3, #0
 8001152:	f040 81bc 	bne.w	80014ce <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800115e:	d10f      	bne.n	8001180 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2200      	movs	r2, #0
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fc3f 	bl	80009ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fbe6 	bl	800094a <LL_ADC_SetSamplingTimeCommonConfig>
 800117e:	e00e      	b.n	800119e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	461a      	mov	r2, r3
 800118e:	f7ff fc2e 	bl	80009ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fbd6 	bl	800094a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	695a      	ldr	r2, [r3, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d00a      	beq.n	80011d6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	6919      	ldr	r1, [r3, #16]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80011d0:	f7ff fb66 	bl	80008a0 <LL_ADC_SetOffset>
 80011d4:	e17b      	b.n	80014ce <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fb83 	bl	80008e8 <LL_ADC_GetOffsetChannel>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10a      	bne.n	8001202 <HAL_ADC_ConfigChannel+0x17e>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fb78 	bl	80008e8 <LL_ADC_GetOffsetChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	0e9b      	lsrs	r3, r3, #26
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	e01e      	b.n	8001240 <HAL_ADC_ConfigChannel+0x1bc>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fb6d 	bl	80008e8 <LL_ADC_GetOffsetChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001214:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001218:	fa93 f3a3 	rbit	r3, r3
 800121c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001220:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001224:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001228:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001230:	2320      	movs	r3, #32
 8001232:	e004      	b.n	800123e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001234:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001238:	fab3 f383 	clz	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001248:	2b00      	cmp	r3, #0
 800124a:	d105      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x1d4>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	0e9b      	lsrs	r3, r3, #26
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	e018      	b.n	800128a <HAL_ADC_ConfigChannel+0x206>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001260:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001264:	fa93 f3a3 	rbit	r3, r3
 8001268:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800126c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001274:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800127c:	2320      	movs	r3, #32
 800127e:	e004      	b.n	800128a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001280:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001284:	fab3 f383 	clz	r3, r3
 8001288:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800128a:	429a      	cmp	r2, r3
 800128c:	d106      	bne.n	800129c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fb3c 	bl	8000914 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fb20 	bl	80008e8 <LL_ADC_GetOffsetChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10a      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x244>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2101      	movs	r1, #1
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fb15 	bl	80008e8 <LL_ADC_GetOffsetChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	0e9b      	lsrs	r3, r3, #26
 80012c2:	f003 021f 	and.w	r2, r3, #31
 80012c6:	e01e      	b.n	8001306 <HAL_ADC_ConfigChannel+0x282>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2101      	movs	r1, #1
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fb0a 	bl	80008e8 <LL_ADC_GetOffsetChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012de:	fa93 f3a3 	rbit	r3, r3
 80012e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80012e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80012ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80012f6:	2320      	movs	r3, #32
 80012f8:	e004      	b.n	8001304 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80012fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012fe:	fab3 f383 	clz	r3, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800130e:	2b00      	cmp	r3, #0
 8001310:	d105      	bne.n	800131e <HAL_ADC_ConfigChannel+0x29a>
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	0e9b      	lsrs	r3, r3, #26
 8001318:	f003 031f 	and.w	r3, r3, #31
 800131c:	e018      	b.n	8001350 <HAL_ADC_ConfigChannel+0x2cc>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001332:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001336:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800133a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001342:	2320      	movs	r3, #32
 8001344:	e004      	b.n	8001350 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001346:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001350:	429a      	cmp	r2, r3
 8001352:	d106      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2200      	movs	r2, #0
 800135a:	2101      	movs	r1, #1
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fad9 	bl	8000914 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2102      	movs	r1, #2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fabd 	bl	80008e8 <LL_ADC_GetOffsetChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001374:	2b00      	cmp	r3, #0
 8001376:	d10a      	bne.n	800138e <HAL_ADC_ConfigChannel+0x30a>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2102      	movs	r1, #2
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fab2 	bl	80008e8 <LL_ADC_GetOffsetChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	0e9b      	lsrs	r3, r3, #26
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	e01e      	b.n	80013cc <HAL_ADC_ConfigChannel+0x348>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2102      	movs	r1, #2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff faa7 	bl	80008e8 <LL_ADC_GetOffsetChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013a4:	fa93 f3a3 	rbit	r3, r3
 80013a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80013ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80013b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80013bc:	2320      	movs	r3, #32
 80013be:	e004      	b.n	80013ca <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80013c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d105      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x360>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	0e9b      	lsrs	r3, r3, #26
 80013de:	f003 031f 	and.w	r3, r3, #31
 80013e2:	e016      	b.n	8001412 <HAL_ADC_ConfigChannel+0x38e>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013f0:	fa93 f3a3 	rbit	r3, r3
 80013f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80013f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80013fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001404:	2320      	movs	r3, #32
 8001406:	e004      	b.n	8001412 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800140c:	fab3 f383 	clz	r3, r3
 8001410:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001412:	429a      	cmp	r2, r3
 8001414:	d106      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2200      	movs	r2, #0
 800141c:	2102      	movs	r1, #2
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fa78 	bl	8000914 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2103      	movs	r1, #3
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fa5c 	bl	80008e8 <LL_ADC_GetOffsetChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10a      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x3cc>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2103      	movs	r1, #3
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fa51 	bl	80008e8 <LL_ADC_GetOffsetChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	0e9b      	lsrs	r3, r3, #26
 800144a:	f003 021f 	and.w	r2, r3, #31
 800144e:	e017      	b.n	8001480 <HAL_ADC_ConfigChannel+0x3fc>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2103      	movs	r1, #3
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fa46 	bl	80008e8 <LL_ADC_GetOffsetChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001462:	fa93 f3a3 	rbit	r3, r3
 8001466:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001468:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800146a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800146c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001472:	2320      	movs	r3, #32
 8001474:	e003      	b.n	800147e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001478:	fab3 f383 	clz	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001488:	2b00      	cmp	r3, #0
 800148a:	d105      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x414>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0e9b      	lsrs	r3, r3, #26
 8001492:	f003 031f 	and.w	r3, r3, #31
 8001496:	e011      	b.n	80014bc <HAL_ADC_ConfigChannel+0x438>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80014a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80014aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80014b0:	2320      	movs	r3, #32
 80014b2:	e003      	b.n	80014bc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80014b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014b6:	fab3 f383 	clz	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80014bc:	429a      	cmp	r2, r3
 80014be:	d106      	bne.n	80014ce <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2200      	movs	r2, #0
 80014c6:	2103      	movs	r1, #3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fa23 	bl	8000914 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fb3c 	bl	8000b50 <LL_ADC_IsEnabled>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f040 8140 	bne.w	8001760 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	6819      	ldr	r1, [r3, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	461a      	mov	r2, r3
 80014ee:	f7ff faa9 	bl	8000a44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	4a8f      	ldr	r2, [pc, #572]	; (8001734 <HAL_ADC_ConfigChannel+0x6b0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	f040 8131 	bne.w	8001760 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10b      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x4a2>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	0e9b      	lsrs	r3, r3, #26
 8001514:	3301      	adds	r3, #1
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	2b09      	cmp	r3, #9
 800151c:	bf94      	ite	ls
 800151e:	2301      	movls	r3, #1
 8001520:	2300      	movhi	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	e019      	b.n	800155a <HAL_ADC_ConfigChannel+0x4d6>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001536:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001538:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800153e:	2320      	movs	r3, #32
 8001540:	e003      	b.n	800154a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001544:	fab3 f383 	clz	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3301      	adds	r3, #1
 800154c:	f003 031f 	and.w	r3, r3, #31
 8001550:	2b09      	cmp	r3, #9
 8001552:	bf94      	ite	ls
 8001554:	2301      	movls	r3, #1
 8001556:	2300      	movhi	r3, #0
 8001558:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800155a:	2b00      	cmp	r3, #0
 800155c:	d079      	beq.n	8001652 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001566:	2b00      	cmp	r3, #0
 8001568:	d107      	bne.n	800157a <HAL_ADC_ConfigChannel+0x4f6>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	0e9b      	lsrs	r3, r3, #26
 8001570:	3301      	adds	r3, #1
 8001572:	069b      	lsls	r3, r3, #26
 8001574:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001578:	e015      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x522>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800158a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800158c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001592:	2320      	movs	r3, #32
 8001594:	e003      	b.n	800159e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001598:	fab3 f383 	clz	r3, r3
 800159c:	b2db      	uxtb	r3, r3
 800159e:	3301      	adds	r3, #1
 80015a0:	069b      	lsls	r3, r3, #26
 80015a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x542>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	0e9b      	lsrs	r3, r3, #26
 80015b8:	3301      	adds	r3, #1
 80015ba:	f003 031f 	and.w	r3, r3, #31
 80015be:	2101      	movs	r1, #1
 80015c0:	fa01 f303 	lsl.w	r3, r1, r3
 80015c4:	e017      	b.n	80015f6 <HAL_ADC_ConfigChannel+0x572>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ce:	fa93 f3a3 	rbit	r3, r3
 80015d2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80015d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80015d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80015de:	2320      	movs	r3, #32
 80015e0:	e003      	b.n	80015ea <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80015e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015e4:	fab3 f383 	clz	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	3301      	adds	r3, #1
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	2101      	movs	r1, #1
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	ea42 0103 	orr.w	r1, r2, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10a      	bne.n	800161c <HAL_ADC_ConfigChannel+0x598>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	0e9b      	lsrs	r3, r3, #26
 800160c:	3301      	adds	r3, #1
 800160e:	f003 021f 	and.w	r2, r3, #31
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	051b      	lsls	r3, r3, #20
 800161a:	e018      	b.n	800164e <HAL_ADC_ConfigChannel+0x5ca>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800162a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800162e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001634:	2320      	movs	r3, #32
 8001636:	e003      	b.n	8001640 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	3301      	adds	r3, #1
 8001642:	f003 021f 	and.w	r2, r3, #31
 8001646:	4613      	mov	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800164e:	430b      	orrs	r3, r1
 8001650:	e081      	b.n	8001756 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800165a:	2b00      	cmp	r3, #0
 800165c:	d107      	bne.n	800166e <HAL_ADC_ConfigChannel+0x5ea>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	0e9b      	lsrs	r3, r3, #26
 8001664:	3301      	adds	r3, #1
 8001666:	069b      	lsls	r3, r3, #26
 8001668:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800166c:	e015      	b.n	800169a <HAL_ADC_ConfigChannel+0x616>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001686:	2320      	movs	r3, #32
 8001688:	e003      	b.n	8001692 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168c:	fab3 f383 	clz	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	3301      	adds	r3, #1
 8001694:	069b      	lsls	r3, r3, #26
 8001696:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x636>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	0e9b      	lsrs	r3, r3, #26
 80016ac:	3301      	adds	r3, #1
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	e017      	b.n	80016ea <HAL_ADC_ConfigChannel+0x666>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	fa93 f3a3 	rbit	r3, r3
 80016c6:	61fb      	str	r3, [r7, #28]
  return result;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80016d2:	2320      	movs	r3, #32
 80016d4:	e003      	b.n	80016de <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	fab3 f383 	clz	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	3301      	adds	r3, #1
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	2101      	movs	r1, #1
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	ea42 0103 	orr.w	r1, r2, r3
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10d      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x692>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	0e9b      	lsrs	r3, r3, #26
 8001700:	3301      	adds	r3, #1
 8001702:	f003 021f 	and.w	r2, r3, #31
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	3b1e      	subs	r3, #30
 800170e:	051b      	lsls	r3, r3, #20
 8001710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001714:	e01e      	b.n	8001754 <HAL_ADC_ConfigChannel+0x6d0>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	613b      	str	r3, [r7, #16]
  return result;
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d104      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800172e:	2320      	movs	r3, #32
 8001730:	e006      	b.n	8001740 <HAL_ADC_ConfigChannel+0x6bc>
 8001732:	bf00      	nop
 8001734:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	3301      	adds	r3, #1
 8001742:	f003 021f 	and.w	r2, r3, #31
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	3b1e      	subs	r3, #30
 800174e:	051b      	lsls	r3, r3, #20
 8001750:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001754:	430b      	orrs	r3, r1
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	6892      	ldr	r2, [r2, #8]
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f947 	bl	80009ee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b3d      	ldr	r3, [pc, #244]	; (800185c <HAL_ADC_ConfigChannel+0x7d8>)
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d06c      	beq.n	8001846 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800176c:	483c      	ldr	r0, [pc, #240]	; (8001860 <HAL_ADC_ConfigChannel+0x7dc>)
 800176e:	f7ff f889 	bl	8000884 <LL_ADC_GetCommonPathInternalCh>
 8001772:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a3a      	ldr	r2, [pc, #232]	; (8001864 <HAL_ADC_ConfigChannel+0x7e0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d127      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d121      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a35      	ldr	r2, [pc, #212]	; (8001868 <HAL_ADC_ConfigChannel+0x7e4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d157      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800179a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800179e:	4619      	mov	r1, r3
 80017a0:	482f      	ldr	r0, [pc, #188]	; (8001860 <HAL_ADC_ConfigChannel+0x7dc>)
 80017a2:	f7ff f85c 	bl	800085e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017a6:	4b31      	ldr	r3, [pc, #196]	; (800186c <HAL_ADC_ConfigChannel+0x7e8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	099b      	lsrs	r3, r3, #6
 80017ac:	4a30      	ldr	r2, [pc, #192]	; (8001870 <HAL_ADC_ConfigChannel+0x7ec>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	099b      	lsrs	r3, r3, #6
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017c0:	e002      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f9      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017ce:	e03a      	b.n	8001846 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a27      	ldr	r2, [pc, #156]	; (8001874 <HAL_ADC_ConfigChannel+0x7f0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d113      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x77e>
 80017da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10d      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <HAL_ADC_ConfigChannel+0x7e4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d12a      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f8:	4619      	mov	r1, r3
 80017fa:	4819      	ldr	r0, [pc, #100]	; (8001860 <HAL_ADC_ConfigChannel+0x7dc>)
 80017fc:	f7ff f82f 	bl	800085e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001800:	e021      	b.n	8001846 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <HAL_ADC_ConfigChannel+0x7f4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d11c      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800180c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d116      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a12      	ldr	r2, [pc, #72]	; (8001868 <HAL_ADC_ConfigChannel+0x7e4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d111      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001822:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001826:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800182a:	4619      	mov	r1, r3
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <HAL_ADC_ConfigChannel+0x7dc>)
 800182e:	f7ff f816 	bl	800085e <LL_ADC_SetCommonPathInternalCh>
 8001832:	e008      	b.n	8001846 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	f043 0220 	orr.w	r2, r3, #32
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800184e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001852:	4618      	mov	r0, r3
 8001854:	37d8      	adds	r7, #216	; 0xd8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	80080000 	.word	0x80080000
 8001860:	50040300 	.word	0x50040300
 8001864:	c7520000 	.word	0xc7520000
 8001868:	50040000 	.word	0x50040000
 800186c:	20000000 	.word	0x20000000
 8001870:	053e2d63 	.word	0x053e2d63
 8001874:	cb840000 	.word	0xcb840000
 8001878:	80000001 	.word	0x80000001

0800187c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff f95f 	bl	8000b50 <LL_ADC_IsEnabled>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d169      	bne.n	800196c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	4b36      	ldr	r3, [pc, #216]	; (8001978 <ADC_Enable+0xfc>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00d      	beq.n	80018c2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	f043 0210 	orr.w	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b6:	f043 0201 	orr.w	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e055      	b.n	800196e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f92e 	bl	8000b28 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80018cc:	482b      	ldr	r0, [pc, #172]	; (800197c <ADC_Enable+0x100>)
 80018ce:	f7fe ffd9 	bl	8000884 <LL_ADC_GetCommonPathInternalCh>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018dc:	4b28      	ldr	r3, [pc, #160]	; (8001980 <ADC_Enable+0x104>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	099b      	lsrs	r3, r3, #6
 80018e2:	4a28      	ldr	r2, [pc, #160]	; (8001984 <ADC_Enable+0x108>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	099b      	lsrs	r3, r3, #6
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80018f6:	e002      	b.n	80018fe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f9      	bne.n	80018f8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001904:	f7fe ff8c 	bl	8000820 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800190a:	e028      	b.n	800195e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff f91d 	bl	8000b50 <LL_ADC_IsEnabled>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d104      	bne.n	8001926 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff f901 	bl	8000b28 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001926:	f7fe ff7b 	bl	8000820 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d914      	bls.n	800195e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b01      	cmp	r3, #1
 8001940:	d00d      	beq.n	800195e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	f043 0210 	orr.w	r2, r3, #16
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001952:	f043 0201 	orr.w	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e007      	b.n	800196e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	d1cf      	bne.n	800190c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	8000003f 	.word	0x8000003f
 800197c:	50040300 	.word	0x50040300
 8001980:	20000000 	.word	0x20000000
 8001984:	053e2d63 	.word	0x053e2d63

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	; (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f7ff ff8e 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff47 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff5c 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff8e 	bl	8001a40 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5d 	bl	80019ec <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ffb0 	bl	8001aa8 <SysTick_Config>
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	e166      	b.n	8001e32 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8158 	beq.w	8001e2c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d005      	beq.n	8001b94 <HAL_GPIO_Init+0x40>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d130      	bne.n	8001bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bca:	2201      	movs	r2, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 0201 	and.w	r2, r3, #1
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d017      	beq.n	8001c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d123      	bne.n	8001c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	220f      	movs	r2, #15
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	08da      	lsrs	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3208      	adds	r2, #8
 8001c80:	6939      	ldr	r1, [r7, #16]
 8001c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2203      	movs	r2, #3
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0203 	and.w	r2, r3, #3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80b2 	beq.w	8001e2c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc8:	4b61      	ldr	r3, [pc, #388]	; (8001e50 <HAL_GPIO_Init+0x2fc>)
 8001cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ccc:	4a60      	ldr	r2, [pc, #384]	; (8001e50 <HAL_GPIO_Init+0x2fc>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6613      	str	r3, [r2, #96]	; 0x60
 8001cd4:	4b5e      	ldr	r3, [pc, #376]	; (8001e50 <HAL_GPIO_Init+0x2fc>)
 8001cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ce0:	4a5c      	ldr	r2, [pc, #368]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d0a:	d02b      	beq.n	8001d64 <HAL_GPIO_Init+0x210>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a52      	ldr	r2, [pc, #328]	; (8001e58 <HAL_GPIO_Init+0x304>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d025      	beq.n	8001d60 <HAL_GPIO_Init+0x20c>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a51      	ldr	r2, [pc, #324]	; (8001e5c <HAL_GPIO_Init+0x308>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d01f      	beq.n	8001d5c <HAL_GPIO_Init+0x208>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a50      	ldr	r2, [pc, #320]	; (8001e60 <HAL_GPIO_Init+0x30c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d019      	beq.n	8001d58 <HAL_GPIO_Init+0x204>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a4f      	ldr	r2, [pc, #316]	; (8001e64 <HAL_GPIO_Init+0x310>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d013      	beq.n	8001d54 <HAL_GPIO_Init+0x200>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a4e      	ldr	r2, [pc, #312]	; (8001e68 <HAL_GPIO_Init+0x314>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00d      	beq.n	8001d50 <HAL_GPIO_Init+0x1fc>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a4d      	ldr	r2, [pc, #308]	; (8001e6c <HAL_GPIO_Init+0x318>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d007      	beq.n	8001d4c <HAL_GPIO_Init+0x1f8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a4c      	ldr	r2, [pc, #304]	; (8001e70 <HAL_GPIO_Init+0x31c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d101      	bne.n	8001d48 <HAL_GPIO_Init+0x1f4>
 8001d44:	2307      	movs	r3, #7
 8001d46:	e00e      	b.n	8001d66 <HAL_GPIO_Init+0x212>
 8001d48:	2308      	movs	r3, #8
 8001d4a:	e00c      	b.n	8001d66 <HAL_GPIO_Init+0x212>
 8001d4c:	2306      	movs	r3, #6
 8001d4e:	e00a      	b.n	8001d66 <HAL_GPIO_Init+0x212>
 8001d50:	2305      	movs	r3, #5
 8001d52:	e008      	b.n	8001d66 <HAL_GPIO_Init+0x212>
 8001d54:	2304      	movs	r3, #4
 8001d56:	e006      	b.n	8001d66 <HAL_GPIO_Init+0x212>
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e004      	b.n	8001d66 <HAL_GPIO_Init+0x212>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e002      	b.n	8001d66 <HAL_GPIO_Init+0x212>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <HAL_GPIO_Init+0x212>
 8001d64:	2300      	movs	r3, #0
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	f002 0203 	and.w	r2, r2, #3
 8001d6c:	0092      	lsls	r2, r2, #2
 8001d6e:	4093      	lsls	r3, r2
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d76:	4937      	ldr	r1, [pc, #220]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d84:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <HAL_GPIO_Init+0x320>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001da8:	4a32      	ldr	r2, [pc, #200]	; (8001e74 <HAL_GPIO_Init+0x320>)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dae:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <HAL_GPIO_Init+0x320>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dd2:	4a28      	ldr	r2, [pc, #160]	; (8001e74 <HAL_GPIO_Init+0x320>)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dd8:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <HAL_GPIO_Init+0x320>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dfc:	4a1d      	ldr	r2, [pc, #116]	; (8001e74 <HAL_GPIO_Init+0x320>)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <HAL_GPIO_Init+0x320>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e26:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <HAL_GPIO_Init+0x320>)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f47f ae91 	bne.w	8001b64 <HAL_GPIO_Init+0x10>
  }
}
 8001e42:	bf00      	nop
 8001e44:	bf00      	nop
 8001e46:	371c      	adds	r7, #28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010000 	.word	0x40010000
 8001e58:	48000400 	.word	0x48000400
 8001e5c:	48000800 	.word	0x48000800
 8001e60:	48000c00 	.word	0x48000c00
 8001e64:	48001000 	.word	0x48001000
 8001e68:	48001400 	.word	0x48001400
 8001e6c:	48001800 	.word	0x48001800
 8001e70:	48001c00 	.word	0x48001c00
 8001e74:	40010400 	.word	0x40010400

08001e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	887b      	ldrh	r3, [r7, #2]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e001      	b.n	8001e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb8:	787b      	ldrb	r3, [r7, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001edc:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee8:	d102      	bne.n	8001ef0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eee:	e00b      	b.n	8001f08 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001efe:	d102      	bne.n	8001f06 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f04:	e000      	b.n	8001f08 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001f06:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40007000 	.word	0x40007000

08001f18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d141      	bne.n	8001faa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f26:	4b4b      	ldr	r3, [pc, #300]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f32:	d131      	bne.n	8001f98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f34:	4b47      	ldr	r3, [pc, #284]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f3a:	4a46      	ldr	r2, [pc, #280]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f44:	4b43      	ldr	r3, [pc, #268]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f4c:	4a41      	ldr	r2, [pc, #260]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f54:	4b40      	ldr	r3, [pc, #256]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2232      	movs	r2, #50	; 0x32
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	4a3f      	ldr	r2, [pc, #252]	; (800205c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	0c9b      	lsrs	r3, r3, #18
 8001f66:	3301      	adds	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f6a:	e002      	b.n	8001f72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f72:	4b38      	ldr	r3, [pc, #224]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7e:	d102      	bne.n	8001f86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f2      	bne.n	8001f6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f86:	4b33      	ldr	r3, [pc, #204]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f92:	d158      	bne.n	8002046 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e057      	b.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f98:	4b2e      	ldr	r3, [pc, #184]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f9e:	4a2d      	ldr	r2, [pc, #180]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fa8:	e04d      	b.n	8002046 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb0:	d141      	bne.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fb2:	4b28      	ldr	r3, [pc, #160]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fbe:	d131      	bne.n	8002024 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fc0:	4b24      	ldr	r3, [pc, #144]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fc6:	4a23      	ldr	r2, [pc, #140]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fd8:	4a1e      	ldr	r2, [pc, #120]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2232      	movs	r2, #50	; 0x32
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	4a1c      	ldr	r2, [pc, #112]	; (800205c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	0c9b      	lsrs	r3, r3, #18
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ff6:	e002      	b.n	8001ffe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200a:	d102      	bne.n	8002012 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f2      	bne.n	8001ff8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201e:	d112      	bne.n	8002046 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e011      	b.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002030:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002034:	e007      	b.n	8002046 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002036:	4b07      	ldr	r3, [pc, #28]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002040:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002044:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40007000 	.word	0x40007000
 8002058:	20000000 	.word	0x20000000
 800205c:	431bde83 	.word	0x431bde83

08002060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	f000 bc08 	b.w	8002884 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002074:	4b96      	ldr	r3, [pc, #600]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800207e:	4b94      	ldr	r3, [pc, #592]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80e4 	beq.w	800225e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <HAL_RCC_OscConfig+0x4c>
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b0c      	cmp	r3, #12
 80020a0:	f040 808b 	bne.w	80021ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	f040 8087 	bne.w	80021ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ac:	4b88      	ldr	r3, [pc, #544]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_OscConfig+0x64>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e3df      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	4b81      	ldr	r3, [pc, #516]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d004      	beq.n	80020de <HAL_RCC_OscConfig+0x7e>
 80020d4:	4b7e      	ldr	r3, [pc, #504]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020dc:	e005      	b.n	80020ea <HAL_RCC_OscConfig+0x8a>
 80020de:	4b7c      	ldr	r3, [pc, #496]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80020e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d223      	bcs.n	8002136 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fd94 	bl	8002c20 <RCC_SetFlashLatencyFromMSIRange>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e3c0      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002102:	4b73      	ldr	r3, [pc, #460]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a72      	ldr	r2, [pc, #456]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002108:	f043 0308 	orr.w	r3, r3, #8
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b70      	ldr	r3, [pc, #448]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	496d      	ldr	r1, [pc, #436]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002120:	4b6b      	ldr	r3, [pc, #428]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	4968      	ldr	r1, [pc, #416]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]
 8002134:	e025      	b.n	8002182 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002136:	4b66      	ldr	r3, [pc, #408]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a65      	ldr	r2, [pc, #404]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 800213c:	f043 0308 	orr.w	r3, r3, #8
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b63      	ldr	r3, [pc, #396]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4960      	ldr	r1, [pc, #384]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002154:	4b5e      	ldr	r3, [pc, #376]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	495b      	ldr	r1, [pc, #364]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fd54 	bl	8002c20 <RCC_SetFlashLatencyFromMSIRange>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e380      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002182:	f000 fcc1 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002186:	4602      	mov	r2, r0
 8002188:	4b51      	ldr	r3, [pc, #324]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	4950      	ldr	r1, [pc, #320]	; (80022d4 <HAL_RCC_OscConfig+0x274>)
 8002194:	5ccb      	ldrb	r3, [r1, r3]
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	fa22 f303 	lsr.w	r3, r2, r3
 800219e:	4a4e      	ldr	r2, [pc, #312]	; (80022d8 <HAL_RCC_OscConfig+0x278>)
 80021a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021a2:	4b4e      	ldr	r3, [pc, #312]	; (80022dc <HAL_RCC_OscConfig+0x27c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe faea 	bl	8000780 <HAL_InitTick>
 80021ac:	4603      	mov	r3, r0
 80021ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d052      	beq.n	800225c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	e364      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d032      	beq.n	8002228 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021c2:	4b43      	ldr	r3, [pc, #268]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a42      	ldr	r2, [pc, #264]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ce:	f7fe fb27 	bl	8000820 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d6:	f7fe fb23 	bl	8000820 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e34d      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021e8:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f4:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a35      	ldr	r2, [pc, #212]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4930      	ldr	r1, [pc, #192]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002212:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	492b      	ldr	r1, [pc, #172]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
 8002226:	e01a      	b.n	800225e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002228:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002234:	f7fe faf4 	bl	8000820 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800223c:	f7fe faf0 	bl	8000820 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e31a      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x1dc>
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d073      	beq.n	8002352 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d005      	beq.n	800227c <HAL_RCC_OscConfig+0x21c>
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d10e      	bne.n	8002294 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d10b      	bne.n	8002294 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d063      	beq.n	8002350 <HAL_RCC_OscConfig+0x2f0>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d15f      	bne.n	8002350 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e2f7      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229c:	d106      	bne.n	80022ac <HAL_RCC_OscConfig+0x24c>
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e025      	b.n	80022f8 <HAL_RCC_OscConfig+0x298>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b4:	d114      	bne.n	80022e0 <HAL_RCC_OscConfig+0x280>
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80022bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a02      	ldr	r2, [pc, #8]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e013      	b.n	80022f8 <HAL_RCC_OscConfig+0x298>
 80022d0:	40021000 	.word	0x40021000
 80022d4:	08003840 	.word	0x08003840
 80022d8:	20000000 	.word	0x20000000
 80022dc:	20000004 	.word	0x20000004
 80022e0:	4ba0      	ldr	r3, [pc, #640]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a9f      	ldr	r2, [pc, #636]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 80022e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b9d      	ldr	r3, [pc, #628]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a9c      	ldr	r2, [pc, #624]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 80022f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7fe fa8e 	bl	8000820 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe fa8a 	bl	8000820 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e2b4      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800231a:	4b92      	ldr	r3, [pc, #584]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x2a8>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe fa7a 	bl	8000820 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002330:	f7fe fa76 	bl	8000820 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e2a0      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002342:	4b88      	ldr	r3, [pc, #544]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x2d0>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d060      	beq.n	8002420 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2b04      	cmp	r3, #4
 8002362:	d005      	beq.n	8002370 <HAL_RCC_OscConfig+0x310>
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2b0c      	cmp	r3, #12
 8002368:	d119      	bne.n	800239e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d116      	bne.n	800239e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002370:	4b7c      	ldr	r3, [pc, #496]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_RCC_OscConfig+0x328>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e27d      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002388:	4b76      	ldr	r3, [pc, #472]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	061b      	lsls	r3, r3, #24
 8002396:	4973      	ldr	r1, [pc, #460]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800239c:	e040      	b.n	8002420 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d023      	beq.n	80023ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a6:	4b6f      	ldr	r3, [pc, #444]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a6e      	ldr	r2, [pc, #440]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7fe fa35 	bl	8000820 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ba:	f7fe fa31 	bl	8000820 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e25b      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023cc:	4b65      	ldr	r3, [pc, #404]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d8:	4b62      	ldr	r3, [pc, #392]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	061b      	lsls	r3, r3, #24
 80023e6:	495f      	ldr	r1, [pc, #380]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
 80023ec:	e018      	b.n	8002420 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ee:	4b5d      	ldr	r3, [pc, #372]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a5c      	ldr	r2, [pc, #368]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 80023f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7fe fa11 	bl	8000820 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002402:	f7fe fa0d 	bl	8000820 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e237      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002414:	4b53      	ldr	r3, [pc, #332]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d03c      	beq.n	80024a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01c      	beq.n	800246e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002434:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 8002436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243a:	4a4a      	ldr	r2, [pc, #296]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002444:	f7fe f9ec 	bl	8000820 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244c:	f7fe f9e8 	bl	8000820 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e212      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800245e:	4b41      	ldr	r3, [pc, #260]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 8002460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0ef      	beq.n	800244c <HAL_RCC_OscConfig+0x3ec>
 800246c:	e01b      	b.n	80024a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246e:	4b3d      	ldr	r3, [pc, #244]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 8002470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002474:	4a3b      	ldr	r2, [pc, #236]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247e:	f7fe f9cf 	bl	8000820 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002486:	f7fe f9cb 	bl	8000820 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e1f5      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002498:	4b32      	ldr	r3, [pc, #200]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 800249a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1ef      	bne.n	8002486 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 80a6 	beq.w	8002600 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024b8:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10d      	bne.n	80024e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	4a26      	ldr	r2, [pc, #152]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 80024ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ce:	6593      	str	r3, [r2, #88]	; 0x58
 80024d0:	4b24      	ldr	r3, [pc, #144]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024dc:	2301      	movs	r3, #1
 80024de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e0:	4b21      	ldr	r3, [pc, #132]	; (8002568 <HAL_RCC_OscConfig+0x508>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d118      	bne.n	800251e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ec:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HAL_RCC_OscConfig+0x508>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <HAL_RCC_OscConfig+0x508>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f8:	f7fe f992 	bl	8000820 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002500:	f7fe f98e 	bl	8000820 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1b8      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <HAL_RCC_OscConfig+0x508>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d108      	bne.n	8002538 <HAL_RCC_OscConfig+0x4d8>
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	4a0d      	ldr	r2, [pc, #52]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002536:	e029      	b.n	800258c <HAL_RCC_OscConfig+0x52c>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d115      	bne.n	800256c <HAL_RCC_OscConfig+0x50c>
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	4a07      	ldr	r2, [pc, #28]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 8002548:	f043 0304 	orr.w	r3, r3, #4
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	4a03      	ldr	r2, [pc, #12]	; (8002564 <HAL_RCC_OscConfig+0x504>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002560:	e014      	b.n	800258c <HAL_RCC_OscConfig+0x52c>
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	40007000 	.word	0x40007000
 800256c:	4b9d      	ldr	r3, [pc, #628]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002572:	4a9c      	ldr	r2, [pc, #624]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800257c:	4b99      	ldr	r3, [pc, #612]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	4a98      	ldr	r2, [pc, #608]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d016      	beq.n	80025c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fe f944 	bl	8000820 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259c:	f7fe f940 	bl	8000820 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e168      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b2:	4b8c      	ldr	r3, [pc, #560]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0ed      	beq.n	800259c <HAL_RCC_OscConfig+0x53c>
 80025c0:	e015      	b.n	80025ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c2:	f7fe f92d 	bl	8000820 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe f929 	bl	8000820 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e151      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e0:	4b80      	ldr	r3, [pc, #512]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1ed      	bne.n	80025ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ee:	7ffb      	ldrb	r3, [r7, #31]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d105      	bne.n	8002600 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f4:	4b7b      	ldr	r3, [pc, #492]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	4a7a      	ldr	r2, [pc, #488]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 80025fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d03c      	beq.n	8002686 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01c      	beq.n	800264e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002614:	4b73      	ldr	r3, [pc, #460]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800261a:	4a72      	ldr	r2, [pc, #456]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7fe f8fc 	bl	8000820 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800262c:	f7fe f8f8 	bl	8000820 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e122      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800263e:	4b69      	ldr	r3, [pc, #420]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0ef      	beq.n	800262c <HAL_RCC_OscConfig+0x5cc>
 800264c:	e01b      	b.n	8002686 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800264e:	4b65      	ldr	r3, [pc, #404]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002650:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002654:	4a63      	ldr	r2, [pc, #396]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7fe f8df 	bl	8000820 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002666:	f7fe f8db 	bl	8000820 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e105      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002678:	4b5a      	ldr	r3, [pc, #360]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 800267a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1ef      	bne.n	8002666 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 80f9 	beq.w	8002882 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	2b02      	cmp	r3, #2
 8002696:	f040 80cf 	bne.w	8002838 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800269a:	4b52      	ldr	r3, [pc, #328]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 0203 	and.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d12c      	bne.n	8002708 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	3b01      	subs	r3, #1
 80026ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d123      	bne.n	8002708 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d11b      	bne.n	8002708 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d113      	bne.n	8002708 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	3b01      	subs	r3, #1
 80026ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d109      	bne.n	8002708 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	085b      	lsrs	r3, r3, #1
 8002700:	3b01      	subs	r3, #1
 8002702:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002704:	429a      	cmp	r2, r3
 8002706:	d071      	beq.n	80027ec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2b0c      	cmp	r3, #12
 800270c:	d068      	beq.n	80027e0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800270e:	4b35      	ldr	r3, [pc, #212]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800271a:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0ac      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800272a:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a2d      	ldr	r2, [pc, #180]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002730:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002734:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002736:	f7fe f873 	bl	8000820 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273e:	f7fe f86f 	bl	8000820 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e099      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800275c:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_RCC_OscConfig+0x788>)
 8002762:	4013      	ands	r3, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800276c:	3a01      	subs	r2, #1
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	4311      	orrs	r1, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002776:	0212      	lsls	r2, r2, #8
 8002778:	4311      	orrs	r1, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800277e:	0852      	lsrs	r2, r2, #1
 8002780:	3a01      	subs	r2, #1
 8002782:	0552      	lsls	r2, r2, #21
 8002784:	4311      	orrs	r1, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800278a:	0852      	lsrs	r2, r2, #1
 800278c:	3a01      	subs	r2, #1
 800278e:	0652      	lsls	r2, r2, #25
 8002790:	4311      	orrs	r1, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002796:	06d2      	lsls	r2, r2, #27
 8002798:	430a      	orrs	r2, r1
 800279a:	4912      	ldr	r1, [pc, #72]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 800279c:	4313      	orrs	r3, r2
 800279e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027a0:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0f      	ldr	r2, [pc, #60]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 80027a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027ac:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 80027b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027b8:	f7fe f832 	bl	8000820 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe f82e 	bl	8000820 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e058      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <HAL_RCC_OscConfig+0x784>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027de:	e050      	b.n	8002882 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e04f      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
 80027e4:	40021000 	.word	0x40021000
 80027e8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ec:	4b27      	ldr	r3, [pc, #156]	; (800288c <HAL_RCC_OscConfig+0x82c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d144      	bne.n	8002882 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027f8:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_OscConfig+0x82c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a23      	ldr	r2, [pc, #140]	; (800288c <HAL_RCC_OscConfig+0x82c>)
 80027fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002802:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002804:	4b21      	ldr	r3, [pc, #132]	; (800288c <HAL_RCC_OscConfig+0x82c>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a20      	ldr	r2, [pc, #128]	; (800288c <HAL_RCC_OscConfig+0x82c>)
 800280a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800280e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002810:	f7fe f806 	bl	8000820 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002818:	f7fe f802 	bl	8000820 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e02c      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282a:	4b18      	ldr	r3, [pc, #96]	; (800288c <HAL_RCC_OscConfig+0x82c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x7b8>
 8002836:	e024      	b.n	8002882 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b0c      	cmp	r3, #12
 800283c:	d01f      	beq.n	800287e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <HAL_RCC_OscConfig+0x82c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a12      	ldr	r2, [pc, #72]	; (800288c <HAL_RCC_OscConfig+0x82c>)
 8002844:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7fd ffe9 	bl	8000820 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002852:	f7fd ffe5 	bl	8000820 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e00f      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_OscConfig+0x82c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f0      	bne.n	8002852 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_RCC_OscConfig+0x82c>)
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	4905      	ldr	r1, [pc, #20]	; (800288c <HAL_RCC_OscConfig+0x82c>)
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCC_OscConfig+0x830>)
 8002878:	4013      	ands	r3, r2
 800287a:	60cb      	str	r3, [r1, #12]
 800287c:	e001      	b.n	8002882 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000
 8002890:	feeefffc 	.word	0xfeeefffc

08002894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e11d      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028ac:	4b90      	ldr	r3, [pc, #576]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d910      	bls.n	80028dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b8d      	ldr	r3, [pc, #564]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 020f 	bic.w	r2, r3, #15
 80028c2:	498b      	ldr	r1, [pc, #556]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b89      	ldr	r3, [pc, #548]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e105      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d010      	beq.n	800290a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d908      	bls.n	800290a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f8:	4b7e      	ldr	r3, [pc, #504]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	497b      	ldr	r1, [pc, #492]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002906:	4313      	orrs	r3, r2
 8002908:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d079      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b03      	cmp	r3, #3
 800291c:	d11e      	bne.n	800295c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291e:	4b75      	ldr	r3, [pc, #468]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0dc      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800292e:	f000 f9d1 	bl	8002cd4 <RCC_GetSysClockFreqFromPLLSource>
 8002932:	4603      	mov	r3, r0
 8002934:	4a70      	ldr	r2, [pc, #448]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d946      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800293a:	4b6e      	ldr	r3, [pc, #440]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d140      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002946:	4b6b      	ldr	r3, [pc, #428]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800294e:	4a69      	ldr	r2, [pc, #420]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002954:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	e035      	b.n	80029c8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d107      	bne.n	8002974 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002964:	4b63      	ldr	r3, [pc, #396]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d115      	bne.n	800299c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0b9      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d107      	bne.n	800298c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800297c:	4b5d      	ldr	r3, [pc, #372]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0ad      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800298c:	4b59      	ldr	r3, [pc, #356]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0a5      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800299c:	f000 f8b4 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4a55      	ldr	r2, [pc, #340]	; (8002af8 <HAL_RCC_ClockConfig+0x264>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d90f      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80029a8:	4b52      	ldr	r3, [pc, #328]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d109      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029b4:	4b4f      	ldr	r3, [pc, #316]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029bc:	4a4d      	ldr	r2, [pc, #308]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80029be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029c8:	4b4a      	ldr	r3, [pc, #296]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f023 0203 	bic.w	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4947      	ldr	r1, [pc, #284]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029da:	f7fd ff21 	bl	8000820 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e2:	f7fd ff1d 	bl	8000820 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e077      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f8:	4b3e      	ldr	r3, [pc, #248]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 020c 	and.w	r2, r3, #12
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d1eb      	bne.n	80029e2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b80      	cmp	r3, #128	; 0x80
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a10:	4b38      	ldr	r3, [pc, #224]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a37      	ldr	r2, [pc, #220]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a1a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d010      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d208      	bcs.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b2e      	ldr	r3, [pc, #184]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	492b      	ldr	r1, [pc, #172]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a4a:	4b29      	ldr	r3, [pc, #164]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d210      	bcs.n	8002a7a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f023 020f 	bic.w	r2, r3, #15
 8002a60:	4923      	ldr	r1, [pc, #140]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a68:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e036      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a86:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4918      	ldr	r1, [pc, #96]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d009      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4910      	ldr	r1, [pc, #64]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ab8:	f000 f826 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	490c      	ldr	r1, [pc, #48]	; (8002afc <HAL_RCC_ClockConfig+0x268>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <HAL_RCC_ClockConfig+0x26c>)
 8002ad6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <HAL_RCC_ClockConfig+0x270>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fe4f 	bl	8000780 <HAL_InitTick>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	73fb      	strb	r3, [r7, #15]

  return status;
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40022000 	.word	0x40022000
 8002af4:	40021000 	.word	0x40021000
 8002af8:	04c4b400 	.word	0x04c4b400
 8002afc:	08003840 	.word	0x08003840
 8002b00:	20000000 	.word	0x20000000
 8002b04:	20000004 	.word	0x20000004

08002b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	; 0x24
 8002b0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b16:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b20:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x34>
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b0c      	cmp	r3, #12
 8002b34:	d121      	bne.n	8002b7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d11e      	bne.n	8002b7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b3c:	4b34      	ldr	r3, [pc, #208]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b48:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	e005      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b58:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b64:	4a2b      	ldr	r2, [pc, #172]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10d      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d102      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b80:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b82:	61bb      	str	r3, [r7, #24]
 8002b84:	e004      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b8c:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002b8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	2b0c      	cmp	r3, #12
 8002b94:	d134      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d003      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0xa6>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d003      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xac>
 8002bac:	e005      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bb0:	617b      	str	r3, [r7, #20]
      break;
 8002bb2:	e005      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002bb6:	617b      	str	r3, [r7, #20]
      break;
 8002bb8:	e002      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	617b      	str	r3, [r7, #20]
      break;
 8002bbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bc0:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	3301      	adds	r3, #1
 8002bcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	fb03 f202 	mul.w	r2, r3, r2
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	0e5b      	lsrs	r3, r3, #25
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c00:	69bb      	ldr	r3, [r7, #24]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	; 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08003850 	.word	0x08003850
 8002c18:	00f42400 	.word	0x00f42400
 8002c1c:	007a1200 	.word	0x007a1200

08002c20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c28:	2300      	movs	r3, #0
 8002c2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c2c:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c38:	f7ff f94e 	bl	8001ed8 <HAL_PWREx_GetVoltageRange>
 8002c3c:	6178      	str	r0, [r7, #20]
 8002c3e:	e014      	b.n	8002c6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c40:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	4a21      	ldr	r2, [pc, #132]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c58:	f7ff f93e 	bl	8001ed8 <HAL_PWREx_GetVoltageRange>
 8002c5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c70:	d10b      	bne.n	8002c8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b80      	cmp	r3, #128	; 0x80
 8002c76:	d913      	bls.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c7c:	d902      	bls.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c7e:	2302      	movs	r3, #2
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	e00d      	b.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c84:	2301      	movs	r3, #1
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	e00a      	b.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b7f      	cmp	r3, #127	; 0x7f
 8002c8e:	d902      	bls.n	8002c96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002c90:	2302      	movs	r3, #2
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	e004      	b.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b70      	cmp	r3, #112	; 0x70
 8002c9a:	d101      	bne.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 020f 	bic.w	r2, r3, #15
 8002ca8:	4909      	ldr	r1, [pc, #36]	; (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cb0:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d001      	beq.n	8002cc2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40022000 	.word	0x40022000

08002cd4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cda:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d00b      	beq.n	8002d02 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d825      	bhi.n	8002d3c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d008      	beq.n	8002d08 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d11f      	bne.n	8002d3c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002cfc:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002cfe:	613b      	str	r3, [r7, #16]
    break;
 8002d00:	e01f      	b.n	8002d42 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002d02:	4b25      	ldr	r3, [pc, #148]	; (8002d98 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002d04:	613b      	str	r3, [r7, #16]
    break;
 8002d06:	e01c      	b.n	8002d42 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d08:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d107      	bne.n	8002d24 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d14:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	e005      	b.n	8002d30 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d24:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002d30:	4a1a      	ldr	r2, [pc, #104]	; (8002d9c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d38:	613b      	str	r3, [r7, #16]
    break;
 8002d3a:	e002      	b.n	8002d42 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]
    break;
 8002d40:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	fb03 f202 	mul.w	r2, r3, r2
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	0e5b      	lsrs	r3, r3, #25
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	3301      	adds	r3, #1
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002d82:	683b      	ldr	r3, [r7, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	40021000 	.word	0x40021000
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	007a1200 	.word	0x007a1200
 8002d9c:	08003850 	.word	0x08003850

08002da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002da8:	2300      	movs	r3, #0
 8002daa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dac:	2300      	movs	r3, #0
 8002dae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d040      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc0:	2b80      	cmp	r3, #128	; 0x80
 8002dc2:	d02a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002dc4:	2b80      	cmp	r3, #128	; 0x80
 8002dc6:	d825      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002dc8:	2b60      	cmp	r3, #96	; 0x60
 8002dca:	d026      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002dcc:	2b60      	cmp	r3, #96	; 0x60
 8002dce:	d821      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002dd0:	2b40      	cmp	r3, #64	; 0x40
 8002dd2:	d006      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	d81d      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d009      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d010      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002de0:	e018      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002de2:	4b89      	ldr	r3, [pc, #548]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	4a88      	ldr	r2, [pc, #544]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dec:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dee:	e015      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3304      	adds	r3, #4
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fb02 	bl	8003400 <RCCEx_PLLSAI1_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e00:	e00c      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3320      	adds	r3, #32
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fbed 	bl	80035e8 <RCCEx_PLLSAI2_Config>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e12:	e003      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	74fb      	strb	r3, [r7, #19]
      break;
 8002e18:	e000      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10b      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e22:	4b79      	ldr	r3, [pc, #484]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e28:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e30:	4975      	ldr	r1, [pc, #468]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e38:	e001      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3a:	7cfb      	ldrb	r3, [r7, #19]
 8002e3c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d047      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e52:	d030      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e58:	d82a      	bhi.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e5e:	d02a      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e64:	d824      	bhi.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e6a:	d008      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e70:	d81e      	bhi.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e7a:	d010      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e7c:	e018      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e7e:	4b62      	ldr	r3, [pc, #392]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	4a61      	ldr	r2, [pc, #388]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e8a:	e015      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fab4 	bl	8003400 <RCCEx_PLLSAI1_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e9c:	e00c      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3320      	adds	r3, #32
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fb9f 	bl	80035e8 <RCCEx_PLLSAI2_Config>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eae:	e003      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	74fb      	strb	r3, [r7, #19]
      break;
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10b      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ebe:	4b52      	ldr	r3, [pc, #328]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ec0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	494e      	ldr	r1, [pc, #312]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002ed4:	e001      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 809f 	beq.w	8003026 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002eec:	4b46      	ldr	r3, [pc, #280]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002efc:	2300      	movs	r3, #0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	4b41      	ldr	r3, [pc, #260]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f06:	4a40      	ldr	r2, [pc, #256]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f0e:	4b3e      	ldr	r3, [pc, #248]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f1e:	4b3b      	ldr	r3, [pc, #236]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a3a      	ldr	r2, [pc, #232]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f2a:	f7fd fc79 	bl	8000820 <HAL_GetTick>
 8002f2e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f30:	e009      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f32:	f7fd fc75 	bl	8000820 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d902      	bls.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	74fb      	strb	r3, [r7, #19]
        break;
 8002f44:	e005      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f46:	4b31      	ldr	r3, [pc, #196]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0ef      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002f52:	7cfb      	ldrb	r3, [r7, #19]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d15b      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f58:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f62:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d01f      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d019      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f82:	4b21      	ldr	r3, [pc, #132]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	4a1f      	ldr	r2, [pc, #124]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f92:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	4a1b      	ldr	r2, [pc, #108]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fa2:	4a19      	ldr	r2, [pc, #100]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d016      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fd fc34 	bl	8000820 <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f7fd fc30 	bl	8000820 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d902      	bls.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	74fb      	strb	r3, [r7, #19]
            break;
 8002fd2:	e006      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0ec      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002fe2:	7cfb      	ldrb	r3, [r7, #19]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10c      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fe8:	4b07      	ldr	r3, [pc, #28]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff8:	4903      	ldr	r1, [pc, #12]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003000:	e008      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003002:	7cfb      	ldrb	r3, [r7, #19]
 8003004:	74bb      	strb	r3, [r7, #18]
 8003006:	e005      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003008:	40021000 	.word	0x40021000
 800300c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003014:	7c7b      	ldrb	r3, [r7, #17]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301a:	4ba0      	ldr	r3, [pc, #640]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	4a9f      	ldr	r2, [pc, #636]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003024:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003032:	4b9a      	ldr	r3, [pc, #616]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f023 0203 	bic.w	r2, r3, #3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003040:	4996      	ldr	r1, [pc, #600]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003054:	4b91      	ldr	r3, [pc, #580]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	f023 020c 	bic.w	r2, r3, #12
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	498e      	ldr	r1, [pc, #568]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003076:	4b89      	ldr	r3, [pc, #548]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003084:	4985      	ldr	r1, [pc, #532]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003098:	4b80      	ldr	r3, [pc, #512]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a6:	497d      	ldr	r1, [pc, #500]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030ba:	4b78      	ldr	r3, [pc, #480]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c8:	4974      	ldr	r1, [pc, #464]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030dc:	4b6f      	ldr	r3, [pc, #444]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ea:	496c      	ldr	r1, [pc, #432]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030fe:	4b67      	ldr	r3, [pc, #412]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800310c:	4963      	ldr	r1, [pc, #396]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003120:	4b5e      	ldr	r3, [pc, #376]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800312e:	495b      	ldr	r1, [pc, #364]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003142:	4b56      	ldr	r3, [pc, #344]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003150:	4952      	ldr	r1, [pc, #328]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003164:	4b4d      	ldr	r3, [pc, #308]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	494a      	ldr	r1, [pc, #296]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003186:	4b45      	ldr	r3, [pc, #276]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003194:	4941      	ldr	r1, [pc, #260]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031a8:	4b3c      	ldr	r3, [pc, #240]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ae:	f023 0203 	bic.w	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b6:	4939      	ldr	r1, [pc, #228]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d028      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ca:	4b34      	ldr	r3, [pc, #208]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d8:	4930      	ldr	r1, [pc, #192]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e8:	d106      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ea:	4b2c      	ldr	r3, [pc, #176]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	4a2b      	ldr	r2, [pc, #172]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031f4:	60d3      	str	r3, [r2, #12]
 80031f6:	e011      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003200:	d10c      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3304      	adds	r3, #4
 8003206:	2101      	movs	r1, #1
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f8f9 	bl	8003400 <RCCEx_PLLSAI1_Config>
 800320e:	4603      	mov	r3, r0
 8003210:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d04d      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800322c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003230:	d108      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003232:	4b1a      	ldr	r3, [pc, #104]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003234:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003238:	4a18      	ldr	r2, [pc, #96]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800323e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003242:	e012      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003244:	4b15      	ldr	r3, [pc, #84]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800324a:	4a14      	ldr	r2, [pc, #80]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800324c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003250:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003262:	490e      	ldr	r1, [pc, #56]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800326e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003272:	d106      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4a08      	ldr	r2, [pc, #32]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800327a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800327e:	60d3      	str	r3, [r2, #12]
 8003280:	e020      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800328a:	d109      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4a02      	ldr	r2, [pc, #8]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003296:	60d3      	str	r3, [r2, #12]
 8003298:	e014      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800329a:	bf00      	nop
 800329c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3304      	adds	r3, #4
 80032ae:	2101      	movs	r1, #1
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 f8a5 	bl	8003400 <RCCEx_PLLSAI1_Config>
 80032b6:	4603      	mov	r3, r0
 80032b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032ba:	7cfb      	ldrb	r3, [r7, #19]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80032c0:	7cfb      	ldrb	r3, [r7, #19]
 80032c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d028      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032d0:	4b4a      	ldr	r3, [pc, #296]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032de:	4947      	ldr	r1, [pc, #284]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ee:	d106      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f0:	4b42      	ldr	r3, [pc, #264]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a41      	ldr	r2, [pc, #260]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032fa:	60d3      	str	r3, [r2, #12]
 80032fc:	e011      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003302:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003306:	d10c      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	2101      	movs	r1, #1
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f876 	bl	8003400 <RCCEx_PLLSAI1_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003318:	7cfb      	ldrb	r3, [r7, #19]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800331e:	7cfb      	ldrb	r3, [r7, #19]
 8003320:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01e      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800332e:	4b33      	ldr	r3, [pc, #204]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800333e:	492f      	ldr	r1, [pc, #188]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800334c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003350:	d10c      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3304      	adds	r3, #4
 8003356:	2102      	movs	r1, #2
 8003358:	4618      	mov	r0, r3
 800335a:	f000 f851 	bl	8003400 <RCCEx_PLLSAI1_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003362:	7cfb      	ldrb	r3, [r7, #19]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003378:	4b20      	ldr	r3, [pc, #128]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800337a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800337e:	f023 0204 	bic.w	r2, r3, #4
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003388:	491c      	ldr	r1, [pc, #112]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00b      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800339c:	4b17      	ldr	r3, [pc, #92]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800339e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033a2:	f023 0218 	bic.w	r2, r3, #24
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	4913      	ldr	r1, [pc, #76]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d017      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80033c0:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d0:	490a      	ldr	r1, [pc, #40]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033e2:	d105      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4a04      	ldr	r2, [pc, #16]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000

08003400 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800340e:	4b72      	ldr	r3, [pc, #456]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00e      	beq.n	8003438 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800341a:	4b6f      	ldr	r3, [pc, #444]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 0203 	and.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d103      	bne.n	8003432 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
       ||
 800342e:	2b00      	cmp	r3, #0
 8003430:	d142      	bne.n	80034b8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
 8003436:	e03f      	b.n	80034b8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d018      	beq.n	8003472 <RCCEx_PLLSAI1_Config+0x72>
 8003440:	2b03      	cmp	r3, #3
 8003442:	d825      	bhi.n	8003490 <RCCEx_PLLSAI1_Config+0x90>
 8003444:	2b01      	cmp	r3, #1
 8003446:	d002      	beq.n	800344e <RCCEx_PLLSAI1_Config+0x4e>
 8003448:	2b02      	cmp	r3, #2
 800344a:	d009      	beq.n	8003460 <RCCEx_PLLSAI1_Config+0x60>
 800344c:	e020      	b.n	8003490 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800344e:	4b62      	ldr	r3, [pc, #392]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d11d      	bne.n	8003496 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345e:	e01a      	b.n	8003496 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003460:	4b5d      	ldr	r3, [pc, #372]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003468:	2b00      	cmp	r3, #0
 800346a:	d116      	bne.n	800349a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003470:	e013      	b.n	800349a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003472:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10f      	bne.n	800349e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800347e:	4b56      	ldr	r3, [pc, #344]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800348e:	e006      	b.n	800349e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
      break;
 8003494:	e004      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003496:	bf00      	nop
 8003498:	e002      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800349e:	bf00      	nop
    }

    if(status == HAL_OK)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d108      	bne.n	80034b8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80034a6:	4b4c      	ldr	r3, [pc, #304]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f023 0203 	bic.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4949      	ldr	r1, [pc, #292]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f040 8086 	bne.w	80035cc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034c0:	4b45      	ldr	r3, [pc, #276]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a44      	ldr	r2, [pc, #272]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034cc:	f7fd f9a8 	bl	8000820 <HAL_GetTick>
 80034d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034d2:	e009      	b.n	80034e8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034d4:	f7fd f9a4 	bl	8000820 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d902      	bls.n	80034e8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	73fb      	strb	r3, [r7, #15]
        break;
 80034e6:	e005      	b.n	80034f4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034e8:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ef      	bne.n	80034d4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d168      	bne.n	80035cc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d113      	bne.n	8003528 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003500:	4b35      	ldr	r3, [pc, #212]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	4b35      	ldr	r3, [pc, #212]	; (80035dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003506:	4013      	ands	r3, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6892      	ldr	r2, [r2, #8]
 800350c:	0211      	lsls	r1, r2, #8
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68d2      	ldr	r2, [r2, #12]
 8003512:	06d2      	lsls	r2, r2, #27
 8003514:	4311      	orrs	r1, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6852      	ldr	r2, [r2, #4]
 800351a:	3a01      	subs	r2, #1
 800351c:	0112      	lsls	r2, r2, #4
 800351e:	430a      	orrs	r2, r1
 8003520:	492d      	ldr	r1, [pc, #180]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003522:	4313      	orrs	r3, r2
 8003524:	610b      	str	r3, [r1, #16]
 8003526:	e02d      	b.n	8003584 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d115      	bne.n	800355a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800352e:	4b2a      	ldr	r3, [pc, #168]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	4b2b      	ldr	r3, [pc, #172]	; (80035e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6892      	ldr	r2, [r2, #8]
 800353a:	0211      	lsls	r1, r2, #8
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6912      	ldr	r2, [r2, #16]
 8003540:	0852      	lsrs	r2, r2, #1
 8003542:	3a01      	subs	r2, #1
 8003544:	0552      	lsls	r2, r2, #21
 8003546:	4311      	orrs	r1, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6852      	ldr	r2, [r2, #4]
 800354c:	3a01      	subs	r2, #1
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	430a      	orrs	r2, r1
 8003552:	4921      	ldr	r1, [pc, #132]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003554:	4313      	orrs	r3, r2
 8003556:	610b      	str	r3, [r1, #16]
 8003558:	e014      	b.n	8003584 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800355a:	4b1f      	ldr	r3, [pc, #124]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	4b21      	ldr	r3, [pc, #132]	; (80035e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003560:	4013      	ands	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6892      	ldr	r2, [r2, #8]
 8003566:	0211      	lsls	r1, r2, #8
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6952      	ldr	r2, [r2, #20]
 800356c:	0852      	lsrs	r2, r2, #1
 800356e:	3a01      	subs	r2, #1
 8003570:	0652      	lsls	r2, r2, #25
 8003572:	4311      	orrs	r1, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6852      	ldr	r2, [r2, #4]
 8003578:	3a01      	subs	r2, #1
 800357a:	0112      	lsls	r2, r2, #4
 800357c:	430a      	orrs	r2, r1
 800357e:	4916      	ldr	r1, [pc, #88]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003580:	4313      	orrs	r3, r2
 8003582:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003584:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800358a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800358e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003590:	f7fd f946 	bl	8000820 <HAL_GetTick>
 8003594:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003596:	e009      	b.n	80035ac <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003598:	f7fd f942 	bl	8000820 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d902      	bls.n	80035ac <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	73fb      	strb	r3, [r7, #15]
          break;
 80035aa:	e005      	b.n	80035b8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035ac:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0ef      	beq.n	8003598 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	4904      	ldr	r1, [pc, #16]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	07ff800f 	.word	0x07ff800f
 80035e0:	ff9f800f 	.word	0xff9f800f
 80035e4:	f9ff800f 	.word	0xf9ff800f

080035e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035f6:	4b72      	ldr	r3, [pc, #456]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00e      	beq.n	8003620 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003602:	4b6f      	ldr	r3, [pc, #444]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0203 	and.w	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d103      	bne.n	800361a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
       ||
 8003616:	2b00      	cmp	r3, #0
 8003618:	d142      	bne.n	80036a0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	e03f      	b.n	80036a0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b03      	cmp	r3, #3
 8003626:	d018      	beq.n	800365a <RCCEx_PLLSAI2_Config+0x72>
 8003628:	2b03      	cmp	r3, #3
 800362a:	d825      	bhi.n	8003678 <RCCEx_PLLSAI2_Config+0x90>
 800362c:	2b01      	cmp	r3, #1
 800362e:	d002      	beq.n	8003636 <RCCEx_PLLSAI2_Config+0x4e>
 8003630:	2b02      	cmp	r3, #2
 8003632:	d009      	beq.n	8003648 <RCCEx_PLLSAI2_Config+0x60>
 8003634:	e020      	b.n	8003678 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003636:	4b62      	ldr	r3, [pc, #392]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d11d      	bne.n	800367e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003646:	e01a      	b.n	800367e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003648:	4b5d      	ldr	r3, [pc, #372]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003650:	2b00      	cmp	r3, #0
 8003652:	d116      	bne.n	8003682 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003658:	e013      	b.n	8003682 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800365a:	4b59      	ldr	r3, [pc, #356]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003666:	4b56      	ldr	r3, [pc, #344]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003676:	e006      	b.n	8003686 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      break;
 800367c:	e004      	b.n	8003688 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800367e:	bf00      	nop
 8003680:	e002      	b.n	8003688 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003682:	bf00      	nop
 8003684:	e000      	b.n	8003688 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003686:	bf00      	nop
    }

    if(status == HAL_OK)
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d108      	bne.n	80036a0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800368e:	4b4c      	ldr	r3, [pc, #304]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f023 0203 	bic.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4949      	ldr	r1, [pc, #292]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800369c:	4313      	orrs	r3, r2
 800369e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f040 8086 	bne.w	80037b4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036a8:	4b45      	ldr	r3, [pc, #276]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a44      	ldr	r2, [pc, #272]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b4:	f7fd f8b4 	bl	8000820 <HAL_GetTick>
 80036b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036ba:	e009      	b.n	80036d0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036bc:	f7fd f8b0 	bl	8000820 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d902      	bls.n	80036d0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	73fb      	strb	r3, [r7, #15]
        break;
 80036ce:	e005      	b.n	80036dc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036d0:	4b3b      	ldr	r3, [pc, #236]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ef      	bne.n	80036bc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d168      	bne.n	80037b4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d113      	bne.n	8003710 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036e8:	4b35      	ldr	r3, [pc, #212]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	4b35      	ldr	r3, [pc, #212]	; (80037c4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6892      	ldr	r2, [r2, #8]
 80036f4:	0211      	lsls	r1, r2, #8
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68d2      	ldr	r2, [r2, #12]
 80036fa:	06d2      	lsls	r2, r2, #27
 80036fc:	4311      	orrs	r1, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6852      	ldr	r2, [r2, #4]
 8003702:	3a01      	subs	r2, #1
 8003704:	0112      	lsls	r2, r2, #4
 8003706:	430a      	orrs	r2, r1
 8003708:	492d      	ldr	r1, [pc, #180]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800370a:	4313      	orrs	r3, r2
 800370c:	614b      	str	r3, [r1, #20]
 800370e:	e02d      	b.n	800376c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d115      	bne.n	8003742 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003716:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800371c:	4013      	ands	r3, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6892      	ldr	r2, [r2, #8]
 8003722:	0211      	lsls	r1, r2, #8
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6912      	ldr	r2, [r2, #16]
 8003728:	0852      	lsrs	r2, r2, #1
 800372a:	3a01      	subs	r2, #1
 800372c:	0552      	lsls	r2, r2, #21
 800372e:	4311      	orrs	r1, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6852      	ldr	r2, [r2, #4]
 8003734:	3a01      	subs	r2, #1
 8003736:	0112      	lsls	r2, r2, #4
 8003738:	430a      	orrs	r2, r1
 800373a:	4921      	ldr	r1, [pc, #132]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800373c:	4313      	orrs	r3, r2
 800373e:	614b      	str	r3, [r1, #20]
 8003740:	e014      	b.n	800376c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003742:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	4b21      	ldr	r3, [pc, #132]	; (80037cc <RCCEx_PLLSAI2_Config+0x1e4>)
 8003748:	4013      	ands	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6892      	ldr	r2, [r2, #8]
 800374e:	0211      	lsls	r1, r2, #8
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6952      	ldr	r2, [r2, #20]
 8003754:	0852      	lsrs	r2, r2, #1
 8003756:	3a01      	subs	r2, #1
 8003758:	0652      	lsls	r2, r2, #25
 800375a:	4311      	orrs	r1, r2
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6852      	ldr	r2, [r2, #4]
 8003760:	3a01      	subs	r2, #1
 8003762:	0112      	lsls	r2, r2, #4
 8003764:	430a      	orrs	r2, r1
 8003766:	4916      	ldr	r1, [pc, #88]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003768:	4313      	orrs	r3, r2
 800376a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800376c:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003776:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7fd f852 	bl	8000820 <HAL_GetTick>
 800377c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800377e:	e009      	b.n	8003794 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003780:	f7fd f84e 	bl	8000820 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d902      	bls.n	8003794 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	73fb      	strb	r3, [r7, #15]
          break;
 8003792:	e005      	b.n	80037a0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003794:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ef      	beq.n	8003780 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	4904      	ldr	r1, [pc, #16]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
 80037c4:	07ff800f 	.word	0x07ff800f
 80037c8:	ff9f800f 	.word	0xff9f800f
 80037cc:	f9ff800f 	.word	0xf9ff800f

080037d0 <__libc_init_array>:
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	4d0d      	ldr	r5, [pc, #52]	; (8003808 <__libc_init_array+0x38>)
 80037d4:	4c0d      	ldr	r4, [pc, #52]	; (800380c <__libc_init_array+0x3c>)
 80037d6:	1b64      	subs	r4, r4, r5
 80037d8:	10a4      	asrs	r4, r4, #2
 80037da:	2600      	movs	r6, #0
 80037dc:	42a6      	cmp	r6, r4
 80037de:	d109      	bne.n	80037f4 <__libc_init_array+0x24>
 80037e0:	4d0b      	ldr	r5, [pc, #44]	; (8003810 <__libc_init_array+0x40>)
 80037e2:	4c0c      	ldr	r4, [pc, #48]	; (8003814 <__libc_init_array+0x44>)
 80037e4:	f000 f820 	bl	8003828 <_init>
 80037e8:	1b64      	subs	r4, r4, r5
 80037ea:	10a4      	asrs	r4, r4, #2
 80037ec:	2600      	movs	r6, #0
 80037ee:	42a6      	cmp	r6, r4
 80037f0:	d105      	bne.n	80037fe <__libc_init_array+0x2e>
 80037f2:	bd70      	pop	{r4, r5, r6, pc}
 80037f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f8:	4798      	blx	r3
 80037fa:	3601      	adds	r6, #1
 80037fc:	e7ee      	b.n	80037dc <__libc_init_array+0xc>
 80037fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003802:	4798      	blx	r3
 8003804:	3601      	adds	r6, #1
 8003806:	e7f2      	b.n	80037ee <__libc_init_array+0x1e>
 8003808:	08003880 	.word	0x08003880
 800380c:	08003880 	.word	0x08003880
 8003810:	08003880 	.word	0x08003880
 8003814:	08003884 	.word	0x08003884

08003818 <memset>:
 8003818:	4402      	add	r2, r0
 800381a:	4603      	mov	r3, r0
 800381c:	4293      	cmp	r3, r2
 800381e:	d100      	bne.n	8003822 <memset+0xa>
 8003820:	4770      	bx	lr
 8003822:	f803 1b01 	strb.w	r1, [r3], #1
 8003826:	e7f9      	b.n	800381c <memset+0x4>

08003828 <_init>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	bf00      	nop
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr

08003834 <_fini>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	bf00      	nop
 8003838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383a:	bc08      	pop	{r3}
 800383c:	469e      	mov	lr, r3
 800383e:	4770      	bx	lr

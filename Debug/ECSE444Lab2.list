
ECSE444Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003674  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003830  08003830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003870  08003870  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003870  08003870  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003870  08003870  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003870  08003870  00013870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08003884  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08003884  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009151  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001701  00000000  00000000  0002918d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  0002a890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002b188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f0f  00000000  00000000  0002b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000948f  00000000  00000000  000558d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107bf8  00000000  00000000  0005ed66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016695e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d0  00000000  00000000  001669b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003818 	.word	0x08003818

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003818 	.word	0x08003818

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	ed2d 8b02 	vpush	{d8}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000206:	f000 fa9a 	bl	800073e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020a:	f000 f88d 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020e:	f000 f975 	bl	80004fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000212:	f000 f8db 	bl	80003cc <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float CALIBRATION_CONSTANT = (float)(TS_CAL2_TEMP - TS_CAL1_TEMP) / (float)(TS_CAL2 - TS_CAL1);
 8000216:	4b3e      	ldr	r3, [pc, #248]	; (8000310 <main+0x114>)
 8000218:	881b      	ldrh	r3, [r3, #0]
 800021a:	461a      	mov	r2, r3
 800021c:	4b3d      	ldr	r3, [pc, #244]	; (8000314 <main+0x118>)
 800021e:	881b      	ldrh	r3, [r3, #0]
 8000220:	1ad3      	subs	r3, r2, r3
 8000222:	ee07 3a90 	vmov	s15, r3
 8000226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800022a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8000318 <main+0x11c>
 800022e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000232:	edc7 7a05 	vstr	s15, [r7, #20]
  while (1)
  {
    /* USER CODE END WHILE */
  uint8_t status = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	74fb      	strb	r3, [r7, #19]
  float vref_ratio=1, temperature=0;
 800023a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800023e:	60fb      	str	r3, [r7, #12]
 8000240:	f04f 0300 	mov.w	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value;

  while (1)
  {
	toggleTemperature(0);
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f924 	bl	8000494 <toggleTemperature>
	HAL_ADC_Start(&hadc1);
 800024c:	4833      	ldr	r0, [pc, #204]	; (800031c <main+0x120>)
 800024e:	f000 fe11 	bl	8000e74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000252:	f04f 31ff 	mov.w	r1, #4294967295
 8000256:	4831      	ldr	r0, [pc, #196]	; (800031c <main+0x120>)
 8000258:	f000 fe6f 	bl	8000f3a <HAL_ADC_PollForConversion>
 	adc_value = HAL_ADC_GetValue(&hadc1);
 800025c:	482f      	ldr	r0, [pc, #188]	; (800031c <main+0x120>)
 800025e:	f000 fefb 	bl	8001058 <HAL_ADC_GetValue>
 8000262:	4603      	mov	r3, r0
 8000264:	80fb      	strh	r3, [r7, #6]
	vref_ratio = (float)VREFINT / (float)HAL_ADC_GetValue(&hadc1);
 8000266:	4b2e      	ldr	r3, [pc, #184]	; (8000320 <main+0x124>)
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	ee07 3a90 	vmov	s15, r3
 800026e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000272:	482a      	ldr	r0, [pc, #168]	; (800031c <main+0x120>)
 8000274:	f000 fef0 	bl	8001058 <HAL_ADC_GetValue>
 8000278:	ee07 0a90 	vmov	s15, r0
 800027c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000280:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000284:	edc7 7a03 	vstr	s15, [r7, #12]

	status = HAL_GPIO_ReadPin(myButton_GPIO_Port, myButton_Pin);
 8000288:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028c:	4825      	ldr	r0, [pc, #148]	; (8000324 <main+0x128>)
 800028e:	f001 fdeb 	bl	8001e68 <HAL_GPIO_ReadPin>
 8000292:	4603      	mov	r3, r0
 8000294:	74fb      	strb	r3, [r7, #19]
	if(status == 0)
 8000296:	7cfb      	ldrb	r3, [r7, #19]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d131      	bne.n	8000300 <main+0x104>
	{
		HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_SET);
 800029c:	2201      	movs	r2, #1
 800029e:	2120      	movs	r1, #32
 80002a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a4:	f001 fdf8 	bl	8001e98 <HAL_GPIO_WritePin>
		toggleTemperature(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f000 f8f3 	bl	8000494 <toggleTemperature>
		HAL_ADC_Start(&hadc1);
 80002ae:	481b      	ldr	r0, [pc, #108]	; (800031c <main+0x120>)
 80002b0:	f000 fde0 	bl	8000e74 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002b4:	f04f 31ff 	mov.w	r1, #4294967295
 80002b8:	4818      	ldr	r0, [pc, #96]	; (800031c <main+0x120>)
 80002ba:	f000 fe3e 	bl	8000f3a <HAL_ADC_PollForConversion>
	 	adc_value = HAL_ADC_GetValue(&hadc1);
 80002be:	4817      	ldr	r0, [pc, #92]	; (800031c <main+0x120>)
 80002c0:	f000 feca 	bl	8001058 <HAL_ADC_GetValue>
 80002c4:	4603      	mov	r3, r0
 80002c6:	80fb      	strh	r3, [r7, #6]
		temperature = CALIBRATION_CONSTANT * (float)(adc_value * vref_ratio - TS_CAL1) + 30;
 80002c8:	88fb      	ldrh	r3, [r7, #6]
 80002ca:	ee07 3a90 	vmov	s15, r3
 80002ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80002d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80002d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <main+0x118>)
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	ee07 3a90 	vmov	s15, r3
 80002e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80002ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80002ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002f2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80002f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80002fa:	edc7 7a02 	vstr	s15, [r7, #8]
 80002fe:	e7a2      	b.n	8000246 <main+0x4a>

	}else{
		HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	2120      	movs	r1, #32
 8000304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000308:	f001 fdc6 	bl	8001e98 <HAL_GPIO_WritePin>
	toggleTemperature(0);
 800030c:	e79b      	b.n	8000246 <main+0x4a>
 800030e:	bf00      	nop
 8000310:	1fff75ca 	.word	0x1fff75ca
 8000314:	1fff75a8 	.word	0x1fff75a8
 8000318:	42c80000 	.word	0x42c80000
 800031c:	20000028 	.word	0x20000028
 8000320:	1fff75aa 	.word	0x1fff75aa
 8000324:	48000800 	.word	0x48000800

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b096      	sub	sp, #88	; 0x58
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	2244      	movs	r2, #68	; 0x44
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f003 fa66 	bl	8003808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	463b      	mov	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800034a:	2000      	movs	r0, #0
 800034c:	f001 fddc 	bl	8001f08 <HAL_PWREx_ControlVoltageScaling>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000356:	f000 f91f 	bl	8000598 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800035a:	2310      	movs	r3, #16
 800035c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800035e:	2301      	movs	r3, #1
 8000360:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000366:	2360      	movs	r3, #96	; 0x60
 8000368:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036a:	2302      	movs	r3, #2
 800036c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800036e:	2301      	movs	r3, #1
 8000370:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000372:	2301      	movs	r3, #1
 8000374:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000376:	233c      	movs	r3, #60	; 0x3c
 8000378:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800037a:	2302      	movs	r3, #2
 800037c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800037e:	2302      	movs	r3, #2
 8000380:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000382:	2302      	movs	r3, #2
 8000384:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fe60 	bl	8002050 <HAL_RCC_OscConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000396:	f000 f8ff 	bl	8000598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	230f      	movs	r3, #15
 800039c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039e:	2303      	movs	r3, #3
 80003a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003ae:	463b      	mov	r3, r7
 80003b0:	2105      	movs	r1, #5
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 fa66 	bl	8002884 <HAL_RCC_ClockConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003be:	f000 f8eb 	bl	8000598 <Error_Handler>
  }
}
 80003c2:	bf00      	nop
 80003c4:	3758      	adds	r7, #88	; 0x58
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003d2:	463b      	mov	r3, r7
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003e2:	4b29      	ldr	r3, [pc, #164]	; (8000488 <MX_ADC1_Init+0xbc>)
 80003e4:	4a29      	ldr	r2, [pc, #164]	; (800048c <MX_ADC1_Init+0xc0>)
 80003e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003e8:	4b27      	ldr	r3, [pc, #156]	; (8000488 <MX_ADC1_Init+0xbc>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003ee:	4b26      	ldr	r3, [pc, #152]	; (8000488 <MX_ADC1_Init+0xbc>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <MX_ADC1_Init+0xbc>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003fa:	4b23      	ldr	r3, [pc, #140]	; (8000488 <MX_ADC1_Init+0xbc>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000402:	2204      	movs	r2, #4
 8000404:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000406:	4b20      	ldr	r3, [pc, #128]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000408:	2200      	movs	r2, #0
 800040a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_ADC1_Init+0xbc>)
 800040e:	2200      	movs	r2, #0
 8000410:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000412:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000414:	2201      	movs	r2, #1
 8000416:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000418:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_ADC1_Init+0xbc>)
 800041a:	2200      	movs	r2, #0
 800041c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000420:	4b19      	ldr	r3, [pc, #100]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000422:	2200      	movs	r2, #0
 8000424:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000426:	4b18      	ldr	r3, [pc, #96]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000428:	2200      	movs	r2, #0
 800042a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800042c:	4b16      	ldr	r3, [pc, #88]	; (8000488 <MX_ADC1_Init+0xbc>)
 800042e:	2200      	movs	r2, #0
 8000430:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000434:	4b14      	ldr	r3, [pc, #80]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000436:	2200      	movs	r2, #0
 8000438:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800043a:	4b13      	ldr	r3, [pc, #76]	; (8000488 <MX_ADC1_Init+0xbc>)
 800043c:	2200      	movs	r2, #0
 800043e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000442:	4811      	ldr	r0, [pc, #68]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000444:	f000 fbca 	bl	8000bdc <HAL_ADC_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800044e:	f000 f8a3 	bl	8000598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_ADC1_Init+0xc4>)
 8000454:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000456:	2306      	movs	r3, #6
 8000458:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800045a:	2304      	movs	r3, #4
 800045c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800045e:	237f      	movs	r3, #127	; 0x7f
 8000460:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000462:	2304      	movs	r3, #4
 8000464:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046a:	463b      	mov	r3, r7
 800046c:	4619      	mov	r1, r3
 800046e:	4806      	ldr	r0, [pc, #24]	; (8000488 <MX_ADC1_Init+0xbc>)
 8000470:	f000 fe00 	bl	8001074 <HAL_ADC_ConfigChannel>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800047a:	f000 f88d 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	3718      	adds	r7, #24
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000028 	.word	0x20000028
 800048c:	50040000 	.word	0x50040000
 8000490:	80000001 	.word	0x80000001

08000494 <toggleTemperature>:

static void toggleTemperature(int temperature)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 800049c:	f107 0308 	add.w	r3, r7, #8
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
 80004aa:	611a      	str	r2, [r3, #16]
 80004ac:	615a      	str	r2, [r3, #20]
	if(temperature)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d002      	beq.n	80004ba <toggleTemperature+0x26>
	{
		sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80004b4:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <toggleTemperature+0x5c>)
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	e001      	b.n	80004be <toggleTemperature+0x2a>
	}else{
		sConfig.Channel = ADC_CHANNEL_VREFINT;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <toggleTemperature+0x60>)
 80004bc:	60bb      	str	r3, [r7, #8]
	}

	sConfig.Rank = ADC_REGULAR_RANK_1;
 80004be:	2306      	movs	r3, #6
 80004c0:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80004c2:	2304      	movs	r3, #4
 80004c4:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004c6:	237f      	movs	r3, #127	; 0x7f
 80004c8:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ca:	2304      	movs	r3, #4
 80004cc:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	4619      	mov	r1, r3
 80004d8:	4807      	ldr	r0, [pc, #28]	; (80004f8 <toggleTemperature+0x64>)
 80004da:	f000 fdcb 	bl	8001074 <HAL_ADC_ConfigChannel>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <toggleTemperature+0x54>
	{
		Error_Handler();
 80004e4:	f000 f858 	bl	8000598 <Error_Handler>
	}
}
 80004e8:	bf00      	nop
 80004ea:	3720      	adds	r7, #32
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	c7520000 	.word	0xc7520000
 80004f4:	80000001 	.word	0x80000001
 80004f8:	20000028 	.word	0x20000028

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 030c 	add.w	r3, r7, #12
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <MX_GPIO_Init+0x94>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <MX_GPIO_Init+0x94>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <MX_GPIO_Init+0x94>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b19      	ldr	r3, [pc, #100]	; (8000590 <MX_GPIO_Init+0x94>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a18      	ldr	r2, [pc, #96]	; (8000590 <MX_GPIO_Init+0x94>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <MX_GPIO_Init+0x94>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2120      	movs	r1, #32
 8000546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054a:	f001 fca5 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 800054e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	4619      	mov	r1, r3
 8000562:	480c      	ldr	r0, [pc, #48]	; (8000594 <MX_GPIO_Init+0x98>)
 8000564:	f001 faee 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed_Pin */
  GPIO_InitStruct.Pin = myLed_Pin;
 8000568:	2320      	movs	r3, #32
 800056a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(myLed_GPIO_Port, &GPIO_InitStruct);
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	4619      	mov	r1, r3
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f001 fadf 	bl	8001b44 <HAL_GPIO_Init>

}
 8000586:	bf00      	nop
 8000588:	3720      	adds	r7, #32
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000
 8000594:	48000800 	.word	0x48000800

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>
	...

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <HAL_MspInit+0x44>)
 80005ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ae:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <HAL_MspInit+0x44>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6613      	str	r3, [r2, #96]	; 0x60
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <HAL_MspInit+0x44>)
 80005b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_MspInit+0x44>)
 80005c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c6:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <HAL_MspInit+0x44>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005cc:	6593      	str	r3, [r2, #88]	; 0x58
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_MspInit+0x44>)
 80005d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b0a8      	sub	sp, #160	; 0xa0
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2294      	movs	r2, #148	; 0x94
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 f903 	bl	8003808 <memset>
  if(hadc->Instance==ADC1)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a19      	ldr	r2, [pc, #100]	; (800066c <HAL_ADC_MspInit+0x80>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d12b      	bne.n	8000664 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800060c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000610:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000612:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800061a:	2301      	movs	r3, #1
 800061c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000622:	2318      	movs	r3, #24
 8000624:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000632:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fba7 	bl	8002d90 <HAL_RCCEx_PeriphCLKConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000648:	f7ff ffa6 	bl	8000598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <HAL_ADC_MspInit+0x84>)
 800064e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_ADC_MspInit+0x84>)
 8000652:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000656:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_ADC_MspInit+0x84>)
 800065a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000664:	bf00      	nop
 8000666:	37a0      	adds	r7, #160	; 0xa0
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	50040000 	.word	0x50040000
 8000670:	40021000 	.word	0x40021000

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <NMI_Handler+0x4>

0800067a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <HardFault_Handler+0x4>

08000680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <MemManage_Handler+0x4>

08000686 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <BusFault_Handler+0x4>

0800068c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <UsageFault_Handler+0x4>

08000692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c0:	f000 f892 	bl	80007e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <SystemInit+0x20>)
 80006ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <SystemInit+0x20>)
 80006d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000724 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006f0:	f7ff ffea 	bl	80006c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <LoopForever+0x6>)
  ldr r1, =_edata
 80006f6:	490d      	ldr	r1, [pc, #52]	; (800072c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <LoopForever+0xe>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <LoopForever+0x12>)
  ldr r4, =_ebss
 800070c:	4c0a      	ldr	r4, [pc, #40]	; (8000738 <LoopForever+0x16>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800071a:	f003 f851 	bl	80037c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800071e:	f7ff fd6d 	bl	80001fc <main>

08000722 <LoopForever>:

LoopForever:
    b LoopForever
 8000722:	e7fe      	b.n	8000722 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000724:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800072c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000730:	08003878 	.word	0x08003878
  ldr r2, =_sbss
 8000734:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000738:	20000094 	.word	0x20000094

0800073c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC1_IRQHandler>

0800073e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000744:	2300      	movs	r3, #0
 8000746:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000748:	2003      	movs	r0, #3
 800074a:	f001 f9c7 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800074e:	2000      	movs	r0, #0
 8000750:	f000 f80e 	bl	8000770 <HAL_InitTick>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	71fb      	strb	r3, [r7, #7]
 800075e:	e001      	b.n	8000764 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000760:	f7ff ff20 	bl	80005a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000764:	79fb      	ldrb	r3, [r7, #7]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000778:	2300      	movs	r3, #0
 800077a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <HAL_InitTick+0x6c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d023      	beq.n	80007cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <HAL_InitTick+0x70>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <HAL_InitTick+0x6c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000792:	fbb3 f3f1 	udiv	r3, r3, r1
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f001 f9c5 	bl	8001b2a <HAL_SYSTICK_Config>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d10f      	bne.n	80007c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b0f      	cmp	r3, #15
 80007aa:	d809      	bhi.n	80007c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ac:	2200      	movs	r2, #0
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295
 80007b4:	f001 f99d 	bl	8001af2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007b8:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <HAL_InitTick+0x74>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6013      	str	r3, [r2, #0]
 80007be:	e007      	b.n	80007d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007c0:	2301      	movs	r3, #1
 80007c2:	73fb      	strb	r3, [r7, #15]
 80007c4:	e004      	b.n	80007d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	73fb      	strb	r3, [r7, #15]
 80007ca:	e001      	b.n	80007d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007cc:	2301      	movs	r3, #1
 80007ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000008 	.word	0x20000008
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20000004 	.word	0x20000004

080007e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_IncTick+0x20>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_IncTick+0x24>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_IncTick+0x24>)
 80007fa:	6013      	str	r3, [r2, #0]
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000008 	.word	0x20000008
 800080c:	20000090 	.word	0x20000090

08000810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <HAL_GetTick+0x14>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000090 	.word	0x20000090

08000828 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	431a      	orrs	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	609a      	str	r2, [r3, #8]
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	431a      	orrs	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	609a      	str	r2, [r3, #8]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000890:	b480      	push	{r7}
 8000892:	b087      	sub	sp, #28
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
 800089c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3360      	adds	r3, #96	; 0x60
 80008a2:	461a      	mov	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <LL_ADC_SetOffset+0x44>)
 80008b2:	4013      	ands	r3, r2
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	430a      	orrs	r2, r1
 80008be:	4313      	orrs	r3, r2
 80008c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80008c8:	bf00      	nop
 80008ca:	371c      	adds	r7, #28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	03fff000 	.word	0x03fff000

080008d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3360      	adds	r3, #96	; 0x60
 80008e6:	461a      	mov	r2, r3
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	4413      	add	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3360      	adds	r3, #96	; 0x60
 8000914:	461a      	mov	r2, r3
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	431a      	orrs	r2, r3
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800092e:	bf00      	nop
 8000930:	371c      	adds	r7, #28
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	431a      	orrs	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	615a      	str	r2, [r3, #20]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000970:	2b00      	cmp	r3, #0
 8000972:	d101      	bne.n	8000978 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000974:	2301      	movs	r3, #1
 8000976:	e000      	b.n	800097a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000986:	b480      	push	{r7}
 8000988:	b087      	sub	sp, #28
 800098a:	af00      	add	r7, sp, #0
 800098c:	60f8      	str	r0, [r7, #12]
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3330      	adds	r3, #48	; 0x30
 8000996:	461a      	mov	r2, r3
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	0a1b      	lsrs	r3, r3, #8
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	f003 030c 	and.w	r3, r3, #12
 80009a2:	4413      	add	r3, r2
 80009a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	f003 031f 	and.w	r3, r3, #31
 80009b0:	211f      	movs	r1, #31
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	401a      	ands	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	0e9b      	lsrs	r3, r3, #26
 80009be:	f003 011f 	and.w	r1, r3, #31
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	f003 031f 	and.w	r3, r3, #31
 80009c8:	fa01 f303 	lsl.w	r3, r1, r3
 80009cc:	431a      	orrs	r2, r3
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009d2:	bf00      	nop
 80009d4:	371c      	adds	r7, #28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80009de:	b480      	push	{r7}
 80009e0:	b087      	sub	sp, #28
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	3314      	adds	r3, #20
 80009ee:	461a      	mov	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	0e5b      	lsrs	r3, r3, #25
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	4413      	add	r3, r2
 80009fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	0d1b      	lsrs	r3, r3, #20
 8000a06:	f003 031f 	and.w	r3, r3, #31
 8000a0a:	2107      	movs	r1, #7
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	401a      	ands	r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	0d1b      	lsrs	r3, r3, #20
 8000a18:	f003 031f 	and.w	r3, r3, #31
 8000a1c:	6879      	ldr	r1, [r7, #4]
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	431a      	orrs	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000a28:	bf00      	nop
 8000a2a:	371c      	adds	r7, #28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	401a      	ands	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0318 	and.w	r3, r3, #24
 8000a56:	4908      	ldr	r1, [pc, #32]	; (8000a78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000a58:	40d9      	lsrs	r1, r3
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	400b      	ands	r3, r1
 8000a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a62:	431a      	orrs	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000a6a:	bf00      	nop
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	0007ffff 	.word	0x0007ffff

08000a7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000a8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	6093      	str	r3, [r2, #8]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ab4:	d101      	bne.n	8000aba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e000      	b.n	8000abc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000ad8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000adc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b04:	d101      	bne.n	8000b0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e000      	b.n	8000b0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b2c:	f043 0201 	orr.w	r2, r3, #1
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d101      	bne.n	8000b58 <LL_ADC_IsEnabled+0x18>
 8000b54:	2301      	movs	r3, #1
 8000b56:	e000      	b.n	8000b5a <LL_ADC_IsEnabled+0x1a>
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b7a:	f043 0204 	orr.w	r2, r3, #4
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	d101      	bne.n	8000ba6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e000      	b.n	8000ba8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f003 0308 	and.w	r3, r3, #8
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	d101      	bne.n	8000bcc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e000      	b.n	8000bce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e12f      	b.n	8000e56 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d109      	bne.n	8000c18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff fcf1 	bl	80005ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff3f 	bl	8000aa0 <LL_ADC_IsDeepPowerDownEnabled>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d004      	beq.n	8000c32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff25 	bl	8000a7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff5a 	bl	8000af0 <LL_ADC_IsInternalRegulatorEnabled>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d115      	bne.n	8000c6e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff3e 	bl	8000ac8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000c4c:	4b84      	ldr	r3, [pc, #528]	; (8000e60 <HAL_ADC_Init+0x284>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	099b      	lsrs	r3, r3, #6
 8000c52:	4a84      	ldr	r2, [pc, #528]	; (8000e64 <HAL_ADC_Init+0x288>)
 8000c54:	fba2 2303 	umull	r2, r3, r2, r3
 8000c58:	099b      	lsrs	r3, r3, #6
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c60:	e002      	b.n	8000c68 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1f9      	bne.n	8000c62 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff3c 	bl	8000af0 <LL_ADC_IsInternalRegulatorEnabled>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d10d      	bne.n	8000c9a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c82:	f043 0210 	orr.w	r2, r3, #16
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c8e:	f043 0201 	orr.w	r2, r3, #1
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff75 	bl	8000b8e <LL_ADC_REG_IsConversionOngoing>
 8000ca4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000caa:	f003 0310 	and.w	r3, r3, #16
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 80c8 	bne.w	8000e44 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 80c4 	bne.w	8000e44 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cc4:	f043 0202 	orr.w	r2, r3, #2
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff35 	bl	8000b40 <LL_ADC_IsEnabled>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d10b      	bne.n	8000cf4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000cdc:	4862      	ldr	r0, [pc, #392]	; (8000e68 <HAL_ADC_Init+0x28c>)
 8000cde:	f7ff ff2f 	bl	8000b40 <LL_ADC_IsEnabled>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d105      	bne.n	8000cf4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4619      	mov	r1, r3
 8000cee:	485f      	ldr	r0, [pc, #380]	; (8000e6c <HAL_ADC_Init+0x290>)
 8000cf0:	f7ff fd9a 	bl	8000828 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7e5b      	ldrb	r3, [r3, #25]
 8000cf8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000cfe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000d04:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000d0a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d12:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d106      	bne.n	8000d30 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d26:	3b01      	subs	r3, #1
 8000d28:	045b      	lsls	r3, r3, #17
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d009      	beq.n	8000d4c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d44:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <HAL_ADC_Init+0x294>)
 8000d54:	4013      	ands	r3, r2
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	6812      	ldr	r2, [r2, #0]
 8000d5a:	69b9      	ldr	r1, [r7, #24]
 8000d5c:	430b      	orrs	r3, r1
 8000d5e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff12 	bl	8000b8e <LL_ADC_REG_IsConversionOngoing>
 8000d6a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff1f 	bl	8000bb4 <LL_ADC_INJ_IsConversionOngoing>
 8000d76:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d140      	bne.n	8000e00 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d13d      	bne.n	8000e00 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7e1b      	ldrb	r3, [r3, #24]
 8000d8c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d8e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d96:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000da6:	f023 0306 	bic.w	r3, r3, #6
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	6812      	ldr	r2, [r2, #0]
 8000dae:	69b9      	ldr	r1, [r7, #24]
 8000db0:	430b      	orrs	r3, r1
 8000db2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d118      	bne.n	8000df0 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	691b      	ldr	r3, [r3, #16]
 8000dc4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000dc8:	f023 0304 	bic.w	r3, r3, #4
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000dd4:	4311      	orrs	r1, r2
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000dda:	4311      	orrs	r1, r2
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000de0:	430a      	orrs	r2, r1
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f042 0201 	orr.w	r2, r2, #1
 8000dec:	611a      	str	r2, [r3, #16]
 8000dee:	e007      	b.n	8000e00 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 0201 	bic.w	r2, r2, #1
 8000dfe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d10c      	bne.n	8000e22 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f023 010f 	bic.w	r1, r3, #15
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	1e5a      	subs	r2, r3, #1
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e20:	e007      	b.n	8000e32 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 020f 	bic.w	r2, r2, #15
 8000e30:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e36:	f023 0303 	bic.w	r3, r3, #3
 8000e3a:	f043 0201 	orr.w	r2, r3, #1
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	659a      	str	r2, [r3, #88]	; 0x58
 8000e42:	e007      	b.n	8000e54 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e48:	f043 0210 	orr.w	r2, r3, #16
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e54:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3720      	adds	r7, #32
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000000 	.word	0x20000000
 8000e64:	053e2d63 	.word	0x053e2d63
 8000e68:	50040000 	.word	0x50040000
 8000e6c:	50040300 	.word	0x50040300
 8000e70:	fff0c007 	.word	0xfff0c007

08000e74 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fe84 	bl	8000b8e <LL_ADC_REG_IsConversionOngoing>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d14f      	bne.n	8000f2c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d101      	bne.n	8000e9a <HAL_ADC_Start+0x26>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e04b      	b.n	8000f32 <HAL_ADC_Start+0xbe>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 fce2 	bl	800186c <ADC_Enable>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d137      	bne.n	8000f22 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000eba:	f023 0301 	bic.w	r3, r3, #1
 8000ebe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ed2:	d106      	bne.n	8000ee2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed8:	f023 0206 	bic.w	r2, r3, #6
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	65da      	str	r2, [r3, #92]	; 0x5c
 8000ee0:	e002      	b.n	8000ee8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	221c      	movs	r2, #28
 8000eee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d007      	beq.n	8000f16 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fe23 	bl	8000b66 <LL_ADC_REG_StartConversion>
 8000f20:	e006      	b.n	8000f30 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000f2a:	e001      	b.n	8000f30 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d102      	bne.n	8000f52 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	e010      	b.n	8000f74 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d007      	beq.n	8000f70 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f64:	f043 0220 	orr.w	r2, r3, #32
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e06f      	b.n	8001050 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000f70:	2304      	movs	r3, #4
 8000f72:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f74:	f7ff fc4c 	bl	8000810 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f7a:	e021      	b.n	8000fc0 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f82:	d01d      	beq.n	8000fc0 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000f84:	f7ff fc44 	bl	8000810 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d302      	bcc.n	8000f9a <HAL_ADC_PollForConversion+0x60>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d112      	bne.n	8000fc0 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10b      	bne.n	8000fc0 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fac:	f043 0204 	orr.w	r2, r3, #4
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e047      	b.n	8001050 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0d6      	beq.n	8000f7c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fcbe 	bl	8000960 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d01c      	beq.n	8001024 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7e5b      	ldrb	r3, [r3, #25]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d118      	bne.n	8001024 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d111      	bne.n	8001024 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001004:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d105      	bne.n	8001024 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	f043 0201 	orr.w	r2, r3, #1
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	2b08      	cmp	r3, #8
 8001030:	d104      	bne.n	800103c <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2208      	movs	r2, #8
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	e008      	b.n	800104e <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d103      	bne.n	800104e <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0b6      	sub	sp, #216	; 0xd8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800108e:	2b01      	cmp	r3, #1
 8001090:	d101      	bne.n	8001096 <HAL_ADC_ConfigChannel+0x22>
 8001092:	2302      	movs	r3, #2
 8001094:	e3d5      	b.n	8001842 <HAL_ADC_ConfigChannel+0x7ce>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fd73 	bl	8000b8e <LL_ADC_REG_IsConversionOngoing>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f040 83ba 	bne.w	8001824 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	d824      	bhi.n	8001102 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	3b02      	subs	r3, #2
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d81b      	bhi.n	80010fa <HAL_ADC_ConfigChannel+0x86>
 80010c2:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <HAL_ADC_ConfigChannel+0x54>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	080010d9 	.word	0x080010d9
 80010cc:	080010e1 	.word	0x080010e1
 80010d0:	080010e9 	.word	0x080010e9
 80010d4:	080010f1 	.word	0x080010f1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	220c      	movs	r2, #12
 80010dc:	605a      	str	r2, [r3, #4]
          break;
 80010de:	e011      	b.n	8001104 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2212      	movs	r2, #18
 80010e4:	605a      	str	r2, [r3, #4]
          break;
 80010e6:	e00d      	b.n	8001104 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2218      	movs	r2, #24
 80010ec:	605a      	str	r2, [r3, #4]
          break;
 80010ee:	e009      	b.n	8001104 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f6:	605a      	str	r2, [r3, #4]
          break;
 80010f8:	e004      	b.n	8001104 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2206      	movs	r2, #6
 80010fe:	605a      	str	r2, [r3, #4]
          break;
 8001100:	e000      	b.n	8001104 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001102:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	6859      	ldr	r1, [r3, #4]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	f7ff fc38 	bl	8000986 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fd37 	bl	8000b8e <LL_ADC_REG_IsConversionOngoing>
 8001120:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fd43 	bl	8000bb4 <LL_ADC_INJ_IsConversionOngoing>
 800112e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001132:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001136:	2b00      	cmp	r3, #0
 8001138:	f040 81c1 	bne.w	80014be <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800113c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001140:	2b00      	cmp	r3, #0
 8001142:	f040 81bc 	bne.w	80014be <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800114e:	d10f      	bne.n	8001170 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2200      	movs	r2, #0
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff fc3f 	bl	80009de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fbe6 	bl	800093a <LL_ADC_SetSamplingTimeCommonConfig>
 800116e:	e00e      	b.n	800118e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	6819      	ldr	r1, [r3, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	461a      	mov	r2, r3
 800117e:	f7ff fc2e 	bl	80009de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fbd6 	bl	800093a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	08db      	lsrs	r3, r3, #3
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d00a      	beq.n	80011c6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	6919      	ldr	r1, [r3, #16]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80011c0:	f7ff fb66 	bl	8000890 <LL_ADC_SetOffset>
 80011c4:	e17b      	b.n	80014be <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fb83 	bl	80008d8 <LL_ADC_GetOffsetChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10a      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x17e>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fb78 	bl	80008d8 <LL_ADC_GetOffsetChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	0e9b      	lsrs	r3, r3, #26
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	e01e      	b.n	8001230 <HAL_ADC_ConfigChannel+0x1bc>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fb6d 	bl	80008d8 <LL_ADC_GetOffsetChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001204:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001208:	fa93 f3a3 	rbit	r3, r3
 800120c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001210:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001214:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001218:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001220:	2320      	movs	r3, #32
 8001222:	e004      	b.n	800122e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001224:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001228:	fab3 f383 	clz	r3, r3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001238:	2b00      	cmp	r3, #0
 800123a:	d105      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x1d4>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	0e9b      	lsrs	r3, r3, #26
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	e018      	b.n	800127a <HAL_ADC_ConfigChannel+0x206>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800125c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001264:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800126c:	2320      	movs	r3, #32
 800126e:	e004      	b.n	800127a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001270:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001274:	fab3 f383 	clz	r3, r3
 8001278:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800127a:	429a      	cmp	r2, r3
 800127c:	d106      	bne.n	800128c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fb3c 	bl	8000904 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fb20 	bl	80008d8 <LL_ADC_GetOffsetChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10a      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x244>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2101      	movs	r1, #1
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fb15 	bl	80008d8 <LL_ADC_GetOffsetChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	0e9b      	lsrs	r3, r3, #26
 80012b2:	f003 021f 	and.w	r2, r3, #31
 80012b6:	e01e      	b.n	80012f6 <HAL_ADC_ConfigChannel+0x282>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2101      	movs	r1, #1
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fb0a 	bl	80008d8 <LL_ADC_GetOffsetChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80012d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80012de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80012e6:	2320      	movs	r3, #32
 80012e8:	e004      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80012ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012ee:	fab3 f383 	clz	r3, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d105      	bne.n	800130e <HAL_ADC_ConfigChannel+0x29a>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0e9b      	lsrs	r3, r3, #26
 8001308:	f003 031f 	and.w	r3, r3, #31
 800130c:	e018      	b.n	8001340 <HAL_ADC_ConfigChannel+0x2cc>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001316:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800131a:	fa93 f3a3 	rbit	r3, r3
 800131e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001322:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001326:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800132a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001332:	2320      	movs	r3, #32
 8001334:	e004      	b.n	8001340 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001336:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800133a:	fab3 f383 	clz	r3, r3
 800133e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001340:	429a      	cmp	r2, r3
 8001342:	d106      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2200      	movs	r2, #0
 800134a:	2101      	movs	r1, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fad9 	bl	8000904 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2102      	movs	r1, #2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fabd 	bl	80008d8 <LL_ADC_GetOffsetChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10a      	bne.n	800137e <HAL_ADC_ConfigChannel+0x30a>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2102      	movs	r1, #2
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fab2 	bl	80008d8 <LL_ADC_GetOffsetChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	0e9b      	lsrs	r3, r3, #26
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	e01e      	b.n	80013bc <HAL_ADC_ConfigChannel+0x348>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2102      	movs	r1, #2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff faa7 	bl	80008d8 <LL_ADC_GetOffsetChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800139c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80013a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80013ac:	2320      	movs	r3, #32
 80013ae:	e004      	b.n	80013ba <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80013b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013b4:	fab3 f383 	clz	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d105      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x360>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	0e9b      	lsrs	r3, r3, #26
 80013ce:	f003 031f 	and.w	r3, r3, #31
 80013d2:	e016      	b.n	8001402 <HAL_ADC_ConfigChannel+0x38e>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013e0:	fa93 f3a3 	rbit	r3, r3
 80013e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80013e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80013ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80013f4:	2320      	movs	r3, #32
 80013f6:	e004      	b.n	8001402 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80013f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013fc:	fab3 f383 	clz	r3, r3
 8001400:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001402:	429a      	cmp	r2, r3
 8001404:	d106      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2200      	movs	r2, #0
 800140c:	2102      	movs	r1, #2
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fa78 	bl	8000904 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2103      	movs	r1, #3
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fa5c 	bl	80008d8 <LL_ADC_GetOffsetChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10a      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x3cc>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2103      	movs	r1, #3
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fa51 	bl	80008d8 <LL_ADC_GetOffsetChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	0e9b      	lsrs	r3, r3, #26
 800143a:	f003 021f 	and.w	r2, r3, #31
 800143e:	e017      	b.n	8001470 <HAL_ADC_ConfigChannel+0x3fc>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2103      	movs	r1, #3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fa46 	bl	80008d8 <LL_ADC_GetOffsetChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001458:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800145a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800145c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001462:	2320      	movs	r3, #32
 8001464:	e003      	b.n	800146e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001466:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001468:	fab3 f383 	clz	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001478:	2b00      	cmp	r3, #0
 800147a:	d105      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x414>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0e9b      	lsrs	r3, r3, #26
 8001482:	f003 031f 	and.w	r3, r3, #31
 8001486:	e011      	b.n	80014ac <HAL_ADC_ConfigChannel+0x438>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001490:	fa93 f3a3 	rbit	r3, r3
 8001494:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001498:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800149a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80014a0:	2320      	movs	r3, #32
 80014a2:	e003      	b.n	80014ac <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80014a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d106      	bne.n	80014be <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2200      	movs	r2, #0
 80014b6:	2103      	movs	r1, #3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fa23 	bl	8000904 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fb3c 	bl	8000b40 <LL_ADC_IsEnabled>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f040 8140 	bne.w	8001750 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	6819      	ldr	r1, [r3, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	461a      	mov	r2, r3
 80014de:	f7ff faa9 	bl	8000a34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	4a8f      	ldr	r2, [pc, #572]	; (8001724 <HAL_ADC_ConfigChannel+0x6b0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	f040 8131 	bne.w	8001750 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10b      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x4a2>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	0e9b      	lsrs	r3, r3, #26
 8001504:	3301      	adds	r3, #1
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	2b09      	cmp	r3, #9
 800150c:	bf94      	ite	ls
 800150e:	2301      	movls	r3, #1
 8001510:	2300      	movhi	r3, #0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	e019      	b.n	800154a <HAL_ADC_ConfigChannel+0x4d6>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001526:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800152e:	2320      	movs	r3, #32
 8001530:	e003      	b.n	800153a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	3301      	adds	r3, #1
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	2b09      	cmp	r3, #9
 8001542:	bf94      	ite	ls
 8001544:	2301      	movls	r3, #1
 8001546:	2300      	movhi	r3, #0
 8001548:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800154a:	2b00      	cmp	r3, #0
 800154c:	d079      	beq.n	8001642 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001556:	2b00      	cmp	r3, #0
 8001558:	d107      	bne.n	800156a <HAL_ADC_ConfigChannel+0x4f6>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	0e9b      	lsrs	r3, r3, #26
 8001560:	3301      	adds	r3, #1
 8001562:	069b      	lsls	r3, r3, #26
 8001564:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001568:	e015      	b.n	8001596 <HAL_ADC_ConfigChannel+0x522>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001572:	fa93 f3a3 	rbit	r3, r3
 8001576:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800157a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800157c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001582:	2320      	movs	r3, #32
 8001584:	e003      	b.n	800158e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	3301      	adds	r3, #1
 8001590:	069b      	lsls	r3, r3, #26
 8001592:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x542>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	0e9b      	lsrs	r3, r3, #26
 80015a8:	3301      	adds	r3, #1
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	e017      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x572>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015be:	fa93 f3a3 	rbit	r3, r3
 80015c2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80015c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80015c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80015ce:	2320      	movs	r3, #32
 80015d0:	e003      	b.n	80015da <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80015d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015d4:	fab3 f383 	clz	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	f003 031f 	and.w	r3, r3, #31
 80015e0:	2101      	movs	r1, #1
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	ea42 0103 	orr.w	r1, r2, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10a      	bne.n	800160c <HAL_ADC_ConfigChannel+0x598>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	0e9b      	lsrs	r3, r3, #26
 80015fc:	3301      	adds	r3, #1
 80015fe:	f003 021f 	and.w	r2, r3, #31
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	051b      	lsls	r3, r3, #20
 800160a:	e018      	b.n	800163e <HAL_ADC_ConfigChannel+0x5ca>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001614:	fa93 f3a3 	rbit	r3, r3
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800161a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800161e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001624:	2320      	movs	r3, #32
 8001626:	e003      	b.n	8001630 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800162a:	fab3 f383 	clz	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	3301      	adds	r3, #1
 8001632:	f003 021f 	and.w	r2, r3, #31
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800163e:	430b      	orrs	r3, r1
 8001640:	e081      	b.n	8001746 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800164a:	2b00      	cmp	r3, #0
 800164c:	d107      	bne.n	800165e <HAL_ADC_ConfigChannel+0x5ea>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	0e9b      	lsrs	r3, r3, #26
 8001654:	3301      	adds	r3, #1
 8001656:	069b      	lsls	r3, r3, #26
 8001658:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800165c:	e015      	b.n	800168a <HAL_ADC_ConfigChannel+0x616>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001676:	2320      	movs	r3, #32
 8001678:	e003      	b.n	8001682 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	3301      	adds	r3, #1
 8001684:	069b      	lsls	r3, r3, #26
 8001686:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001692:	2b00      	cmp	r3, #0
 8001694:	d109      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x636>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	0e9b      	lsrs	r3, r3, #26
 800169c:	3301      	adds	r3, #1
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	e017      	b.n	80016da <HAL_ADC_ConfigChannel+0x666>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	61fb      	str	r3, [r7, #28]
  return result;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80016c2:	2320      	movs	r3, #32
 80016c4:	e003      	b.n	80016ce <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	fab3 f383 	clz	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	3301      	adds	r3, #1
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	2101      	movs	r1, #1
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	ea42 0103 	orr.w	r1, r2, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10d      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x692>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	0e9b      	lsrs	r3, r3, #26
 80016f0:	3301      	adds	r3, #1
 80016f2:	f003 021f 	and.w	r2, r3, #31
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	3b1e      	subs	r3, #30
 80016fe:	051b      	lsls	r3, r3, #20
 8001700:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001704:	e01e      	b.n	8001744 <HAL_ADC_ConfigChannel+0x6d0>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	613b      	str	r3, [r7, #16]
  return result;
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d104      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800171e:	2320      	movs	r3, #32
 8001720:	e006      	b.n	8001730 <HAL_ADC_ConfigChannel+0x6bc>
 8001722:	bf00      	nop
 8001724:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	3301      	adds	r3, #1
 8001732:	f003 021f 	and.w	r2, r3, #31
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	3b1e      	subs	r3, #30
 800173e:	051b      	lsls	r3, r3, #20
 8001740:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001744:	430b      	orrs	r3, r1
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	6892      	ldr	r2, [r2, #8]
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff f947 	bl	80009de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b3d      	ldr	r3, [pc, #244]	; (800184c <HAL_ADC_ConfigChannel+0x7d8>)
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d06c      	beq.n	8001836 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800175c:	483c      	ldr	r0, [pc, #240]	; (8001850 <HAL_ADC_ConfigChannel+0x7dc>)
 800175e:	f7ff f889 	bl	8000874 <LL_ADC_GetCommonPathInternalCh>
 8001762:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a3a      	ldr	r2, [pc, #232]	; (8001854 <HAL_ADC_ConfigChannel+0x7e0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d127      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001770:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d121      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a35      	ldr	r2, [pc, #212]	; (8001858 <HAL_ADC_ConfigChannel+0x7e4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d157      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001786:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800178a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800178e:	4619      	mov	r1, r3
 8001790:	482f      	ldr	r0, [pc, #188]	; (8001850 <HAL_ADC_ConfigChannel+0x7dc>)
 8001792:	f7ff f85c 	bl	800084e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001796:	4b31      	ldr	r3, [pc, #196]	; (800185c <HAL_ADC_ConfigChannel+0x7e8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	099b      	lsrs	r3, r3, #6
 800179c:	4a30      	ldr	r2, [pc, #192]	; (8001860 <HAL_ADC_ConfigChannel+0x7ec>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	099b      	lsrs	r3, r3, #6
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017b0:	e002      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f9      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017be:	e03a      	b.n	8001836 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a27      	ldr	r2, [pc, #156]	; (8001864 <HAL_ADC_ConfigChannel+0x7f0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d113      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x77e>
 80017ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10d      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <HAL_ADC_ConfigChannel+0x7e4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d12a      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e8:	4619      	mov	r1, r3
 80017ea:	4819      	ldr	r0, [pc, #100]	; (8001850 <HAL_ADC_ConfigChannel+0x7dc>)
 80017ec:	f7ff f82f 	bl	800084e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017f0:	e021      	b.n	8001836 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_ADC_ConfigChannel+0x7f4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d11c      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d116      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <HAL_ADC_ConfigChannel+0x7e4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d111      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001812:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001816:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800181a:	4619      	mov	r1, r3
 800181c:	480c      	ldr	r0, [pc, #48]	; (8001850 <HAL_ADC_ConfigChannel+0x7dc>)
 800181e:	f7ff f816 	bl	800084e <LL_ADC_SetCommonPathInternalCh>
 8001822:	e008      	b.n	8001836 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001828:	f043 0220 	orr.w	r2, r3, #32
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800183e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001842:	4618      	mov	r0, r3
 8001844:	37d8      	adds	r7, #216	; 0xd8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	80080000 	.word	0x80080000
 8001850:	50040300 	.word	0x50040300
 8001854:	c7520000 	.word	0xc7520000
 8001858:	50040000 	.word	0x50040000
 800185c:	20000000 	.word	0x20000000
 8001860:	053e2d63 	.word	0x053e2d63
 8001864:	cb840000 	.word	0xcb840000
 8001868:	80000001 	.word	0x80000001

0800186c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff f95f 	bl	8000b40 <LL_ADC_IsEnabled>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d169      	bne.n	800195c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	4b36      	ldr	r3, [pc, #216]	; (8001968 <ADC_Enable+0xfc>)
 8001890:	4013      	ands	r3, r2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00d      	beq.n	80018b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	f043 0210 	orr.w	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a6:	f043 0201 	orr.w	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e055      	b.n	800195e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f92e 	bl	8000b18 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80018bc:	482b      	ldr	r0, [pc, #172]	; (800196c <ADC_Enable+0x100>)
 80018be:	f7fe ffd9 	bl	8000874 <LL_ADC_GetCommonPathInternalCh>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018cc:	4b28      	ldr	r3, [pc, #160]	; (8001970 <ADC_Enable+0x104>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	099b      	lsrs	r3, r3, #6
 80018d2:	4a28      	ldr	r2, [pc, #160]	; (8001974 <ADC_Enable+0x108>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	099b      	lsrs	r3, r3, #6
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80018e6:	e002      	b.n	80018ee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f9      	bne.n	80018e8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80018f4:	f7fe ff8c 	bl	8000810 <HAL_GetTick>
 80018f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018fa:	e028      	b.n	800194e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff f91d 	bl	8000b40 <LL_ADC_IsEnabled>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d104      	bne.n	8001916 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff f901 	bl	8000b18 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001916:	f7fe ff7b 	bl	8000810 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d914      	bls.n	800194e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b01      	cmp	r3, #1
 8001930:	d00d      	beq.n	800194e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	f043 0210 	orr.w	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001942:	f043 0201 	orr.w	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e007      	b.n	800195e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b01      	cmp	r3, #1
 800195a:	d1cf      	bne.n	80018fc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	8000003f 	.word	0x8000003f
 800196c:	50040300 	.word	0x50040300
 8001970:	20000000 	.word	0x20000000
 8001974:	053e2d63 	.word	0x053e2d63

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	; (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	; (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff8e 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff47 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff5c 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff8e 	bl	8001a30 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5d 	bl	80019dc <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffb0 	bl	8001a98 <SysTick_Config>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b52:	e166      	b.n	8001e22 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8158 	beq.w	8001e1c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d005      	beq.n	8001b84 <HAL_GPIO_Init+0x40>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d130      	bne.n	8001be6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bba:	2201      	movs	r2, #1
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	f003 0201 	and.w	r2, r3, #1
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d017      	beq.n	8001c22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d123      	bne.n	8001c76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	08da      	lsrs	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3208      	adds	r2, #8
 8001c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	08da      	lsrs	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3208      	adds	r2, #8
 8001c70:	6939      	ldr	r1, [r7, #16]
 8001c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0203 	and.w	r2, r3, #3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80b2 	beq.w	8001e1c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb8:	4b61      	ldr	r3, [pc, #388]	; (8001e40 <HAL_GPIO_Init+0x2fc>)
 8001cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbc:	4a60      	ldr	r2, [pc, #384]	; (8001e40 <HAL_GPIO_Init+0x2fc>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc4:	4b5e      	ldr	r3, [pc, #376]	; (8001e40 <HAL_GPIO_Init+0x2fc>)
 8001cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cd0:	4a5c      	ldr	r2, [pc, #368]	; (8001e44 <HAL_GPIO_Init+0x300>)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cfa:	d02b      	beq.n	8001d54 <HAL_GPIO_Init+0x210>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a52      	ldr	r2, [pc, #328]	; (8001e48 <HAL_GPIO_Init+0x304>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d025      	beq.n	8001d50 <HAL_GPIO_Init+0x20c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a51      	ldr	r2, [pc, #324]	; (8001e4c <HAL_GPIO_Init+0x308>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d01f      	beq.n	8001d4c <HAL_GPIO_Init+0x208>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a50      	ldr	r2, [pc, #320]	; (8001e50 <HAL_GPIO_Init+0x30c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d019      	beq.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a4f      	ldr	r2, [pc, #316]	; (8001e54 <HAL_GPIO_Init+0x310>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d013      	beq.n	8001d44 <HAL_GPIO_Init+0x200>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a4e      	ldr	r2, [pc, #312]	; (8001e58 <HAL_GPIO_Init+0x314>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00d      	beq.n	8001d40 <HAL_GPIO_Init+0x1fc>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a4d      	ldr	r2, [pc, #308]	; (8001e5c <HAL_GPIO_Init+0x318>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d007      	beq.n	8001d3c <HAL_GPIO_Init+0x1f8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a4c      	ldr	r2, [pc, #304]	; (8001e60 <HAL_GPIO_Init+0x31c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d101      	bne.n	8001d38 <HAL_GPIO_Init+0x1f4>
 8001d34:	2307      	movs	r3, #7
 8001d36:	e00e      	b.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d38:	2308      	movs	r3, #8
 8001d3a:	e00c      	b.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	e00a      	b.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d40:	2305      	movs	r3, #5
 8001d42:	e008      	b.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d44:	2304      	movs	r3, #4
 8001d46:	e006      	b.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e004      	b.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e002      	b.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d54:	2300      	movs	r3, #0
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	f002 0203 	and.w	r2, r2, #3
 8001d5c:	0092      	lsls	r2, r2, #2
 8001d5e:	4093      	lsls	r3, r2
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d66:	4937      	ldr	r1, [pc, #220]	; (8001e44 <HAL_GPIO_Init+0x300>)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d74:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_GPIO_Init+0x320>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d98:	4a32      	ldr	r2, [pc, #200]	; (8001e64 <HAL_GPIO_Init+0x320>)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_GPIO_Init+0x320>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dc2:	4a28      	ldr	r2, [pc, #160]	; (8001e64 <HAL_GPIO_Init+0x320>)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dc8:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <HAL_GPIO_Init+0x320>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dec:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <HAL_GPIO_Init+0x320>)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <HAL_GPIO_Init+0x320>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e16:	4a13      	ldr	r2, [pc, #76]	; (8001e64 <HAL_GPIO_Init+0x320>)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f47f ae91 	bne.w	8001b54 <HAL_GPIO_Init+0x10>
  }
}
 8001e32:	bf00      	nop
 8001e34:	bf00      	nop
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010000 	.word	0x40010000
 8001e48:	48000400 	.word	0x48000400
 8001e4c:	48000800 	.word	0x48000800
 8001e50:	48000c00 	.word	0x48000c00
 8001e54:	48001000 	.word	0x48001000
 8001e58:	48001400 	.word	0x48001400
 8001e5c:	48001800 	.word	0x48001800
 8001e60:	48001c00 	.word	0x48001c00
 8001e64:	40010400 	.word	0x40010400

08001e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e001      	b.n	8001e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea8:	787b      	ldrb	r3, [r7, #1]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eb4:	e002      	b.n	8001ebc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eb6:	887a      	ldrh	r2, [r7, #2]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed8:	d102      	bne.n	8001ee0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ede:	e00b      	b.n	8001ef8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eee:	d102      	bne.n	8001ef6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef4:	e000      	b.n	8001ef8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001ef6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40007000 	.word	0x40007000

08001f08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d141      	bne.n	8001f9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f16:	4b4b      	ldr	r3, [pc, #300]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f22:	d131      	bne.n	8001f88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f24:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f2a:	4a46      	ldr	r2, [pc, #280]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f34:	4b43      	ldr	r3, [pc, #268]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f3c:	4a41      	ldr	r2, [pc, #260]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f44:	4b40      	ldr	r3, [pc, #256]	; (8002048 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2232      	movs	r2, #50	; 0x32
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	4a3f      	ldr	r2, [pc, #252]	; (800204c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	0c9b      	lsrs	r3, r3, #18
 8001f56:	3301      	adds	r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f5a:	e002      	b.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f62:	4b38      	ldr	r3, [pc, #224]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6e:	d102      	bne.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f2      	bne.n	8001f5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f76:	4b33      	ldr	r3, [pc, #204]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f82:	d158      	bne.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e057      	b.n	8002038 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f88:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f8e:	4a2d      	ldr	r2, [pc, #180]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f98:	e04d      	b.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa0:	d141      	bne.n	8002026 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fa2:	4b28      	ldr	r3, [pc, #160]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fae:	d131      	bne.n	8002014 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fb6:	4a23      	ldr	r2, [pc, #140]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fc8:	4a1e      	ldr	r2, [pc, #120]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2232      	movs	r2, #50	; 0x32
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	4a1c      	ldr	r2, [pc, #112]	; (800204c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	0c9b      	lsrs	r3, r3, #18
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe6:	e002      	b.n	8001fee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffa:	d102      	bne.n	8002002 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f2      	bne.n	8001fe8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200e:	d112      	bne.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e011      	b.n	8002038 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002020:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002024:	e007      	b.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002030:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002034:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	40007000 	.word	0x40007000
 8002048:	20000000 	.word	0x20000000
 800204c:	431bde83 	.word	0x431bde83

08002050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	f000 bc08 	b.w	8002874 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002064:	4b96      	ldr	r3, [pc, #600]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800206e:	4b94      	ldr	r3, [pc, #592]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80e4 	beq.w	800224e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d007      	beq.n	800209c <HAL_RCC_OscConfig+0x4c>
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2b0c      	cmp	r3, #12
 8002090:	f040 808b 	bne.w	80021aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b01      	cmp	r3, #1
 8002098:	f040 8087 	bne.w	80021aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800209c:	4b88      	ldr	r3, [pc, #544]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_OscConfig+0x64>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e3df      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1a      	ldr	r2, [r3, #32]
 80020b8:	4b81      	ldr	r3, [pc, #516]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d004      	beq.n	80020ce <HAL_RCC_OscConfig+0x7e>
 80020c4:	4b7e      	ldr	r3, [pc, #504]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020cc:	e005      	b.n	80020da <HAL_RCC_OscConfig+0x8a>
 80020ce:	4b7c      	ldr	r3, [pc, #496]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80020d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020da:	4293      	cmp	r3, r2
 80020dc:	d223      	bcs.n	8002126 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fd94 	bl	8002c10 <RCC_SetFlashLatencyFromMSIRange>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e3c0      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020f2:	4b73      	ldr	r3, [pc, #460]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a72      	ldr	r2, [pc, #456]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80020f8:	f043 0308 	orr.w	r3, r3, #8
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	4b70      	ldr	r3, [pc, #448]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	496d      	ldr	r1, [pc, #436]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002110:	4b6b      	ldr	r3, [pc, #428]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	4968      	ldr	r1, [pc, #416]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
 8002124:	e025      	b.n	8002172 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002126:	4b66      	ldr	r3, [pc, #408]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a65      	ldr	r2, [pc, #404]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b63      	ldr	r3, [pc, #396]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4960      	ldr	r1, [pc, #384]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002144:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	495b      	ldr	r1, [pc, #364]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4618      	mov	r0, r3
 8002164:	f000 fd54 	bl	8002c10 <RCC_SetFlashLatencyFromMSIRange>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e380      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002172:	f000 fcc1 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8002176:	4602      	mov	r2, r0
 8002178:	4b51      	ldr	r3, [pc, #324]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	4950      	ldr	r1, [pc, #320]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002184:	5ccb      	ldrb	r3, [r1, r3]
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	4a4e      	ldr	r2, [pc, #312]	; (80022c8 <HAL_RCC_OscConfig+0x278>)
 8002190:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002192:	4b4e      	ldr	r3, [pc, #312]	; (80022cc <HAL_RCC_OscConfig+0x27c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe faea 	bl	8000770 <HAL_InitTick>
 800219c:	4603      	mov	r3, r0
 800219e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d052      	beq.n	800224c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	e364      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d032      	beq.n	8002218 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021b2:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a42      	ldr	r2, [pc, #264]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021be:	f7fe fb27 	bl	8000810 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021c6:	f7fe fb23 	bl	8000810 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e34d      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021d8:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e4:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a35      	ldr	r2, [pc, #212]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b33      	ldr	r3, [pc, #204]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4930      	ldr	r1, [pc, #192]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002202:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	492b      	ldr	r1, [pc, #172]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
 8002216:	e01a      	b.n	800224e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002218:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a28      	ldr	r2, [pc, #160]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 800221e:	f023 0301 	bic.w	r3, r3, #1
 8002222:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002224:	f7fe faf4 	bl	8000810 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800222c:	f7fe faf0 	bl	8000810 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e31a      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800223e:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x1dc>
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800224c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d073      	beq.n	8002342 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b08      	cmp	r3, #8
 800225e:	d005      	beq.n	800226c <HAL_RCC_OscConfig+0x21c>
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2b0c      	cmp	r3, #12
 8002264:	d10e      	bne.n	8002284 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d10b      	bne.n	8002284 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d063      	beq.n	8002340 <HAL_RCC_OscConfig+0x2f0>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d15f      	bne.n	8002340 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e2f7      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228c:	d106      	bne.n	800229c <HAL_RCC_OscConfig+0x24c>
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e025      	b.n	80022e8 <HAL_RCC_OscConfig+0x298>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a4:	d114      	bne.n	80022d0 <HAL_RCC_OscConfig+0x280>
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a02      	ldr	r2, [pc, #8]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e013      	b.n	80022e8 <HAL_RCC_OscConfig+0x298>
 80022c0:	40021000 	.word	0x40021000
 80022c4:	08003830 	.word	0x08003830
 80022c8:	20000000 	.word	0x20000000
 80022cc:	20000004 	.word	0x20000004
 80022d0:	4ba0      	ldr	r3, [pc, #640]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a9f      	ldr	r2, [pc, #636]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 80022d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b9d      	ldr	r3, [pc, #628]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a9c      	ldr	r2, [pc, #624]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 80022e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d013      	beq.n	8002318 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe fa8e 	bl	8000810 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7fe fa8a 	bl	8000810 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e2b4      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230a:	4b92      	ldr	r3, [pc, #584]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x2a8>
 8002316:	e014      	b.n	8002342 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe fa7a 	bl	8000810 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002320:	f7fe fa76 	bl	8000810 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	; 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e2a0      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002332:	4b88      	ldr	r3, [pc, #544]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x2d0>
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d060      	beq.n	8002410 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b04      	cmp	r3, #4
 8002352:	d005      	beq.n	8002360 <HAL_RCC_OscConfig+0x310>
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2b0c      	cmp	r3, #12
 8002358:	d119      	bne.n	800238e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d116      	bne.n	800238e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002360:	4b7c      	ldr	r3, [pc, #496]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_OscConfig+0x328>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e27d      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002378:	4b76      	ldr	r3, [pc, #472]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	061b      	lsls	r3, r3, #24
 8002386:	4973      	ldr	r1, [pc, #460]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800238c:	e040      	b.n	8002410 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d023      	beq.n	80023de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002396:	4b6f      	ldr	r3, [pc, #444]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a6e      	ldr	r2, [pc, #440]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7fe fa35 	bl	8000810 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023aa:	f7fe fa31 	bl	8000810 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e25b      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023bc:	4b65      	ldr	r3, [pc, #404]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b62      	ldr	r3, [pc, #392]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	061b      	lsls	r3, r3, #24
 80023d6:	495f      	ldr	r1, [pc, #380]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
 80023dc:	e018      	b.n	8002410 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023de:	4b5d      	ldr	r3, [pc, #372]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a5c      	ldr	r2, [pc, #368]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 80023e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7fe fa11 	bl	8000810 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f2:	f7fe fa0d 	bl	8000810 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e237      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002404:	4b53      	ldr	r3, [pc, #332]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f0      	bne.n	80023f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d03c      	beq.n	8002496 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01c      	beq.n	800245e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002424:	4b4b      	ldr	r3, [pc, #300]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 8002426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242a:	4a4a      	ldr	r2, [pc, #296]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7fe f9ec 	bl	8000810 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800243c:	f7fe f9e8 	bl	8000810 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e212      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800244e:	4b41      	ldr	r3, [pc, #260]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 8002450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ef      	beq.n	800243c <HAL_RCC_OscConfig+0x3ec>
 800245c:	e01b      	b.n	8002496 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245e:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 8002460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002464:	4a3b      	ldr	r2, [pc, #236]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246e:	f7fe f9cf 	bl	8000810 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002476:	f7fe f9cb 	bl	8000810 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e1f5      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002488:	4b32      	ldr	r3, [pc, #200]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 800248a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1ef      	bne.n	8002476 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80a6 	beq.w	80025f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a4:	2300      	movs	r3, #0
 80024a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024a8:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 80024aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10d      	bne.n	80024d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	4a26      	ldr	r2, [pc, #152]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 80024ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024be:	6593      	str	r3, [r2, #88]	; 0x58
 80024c0:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024cc:	2301      	movs	r3, #1
 80024ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d0:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_RCC_OscConfig+0x508>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d118      	bne.n	800250e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024dc:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_RCC_OscConfig+0x508>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_RCC_OscConfig+0x508>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e8:	f7fe f992 	bl	8000810 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f0:	f7fe f98e 	bl	8000810 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e1b8      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_RCC_OscConfig+0x508>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d108      	bne.n	8002528 <HAL_RCC_OscConfig+0x4d8>
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	4a0d      	ldr	r2, [pc, #52]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002526:	e029      	b.n	800257c <HAL_RCC_OscConfig+0x52c>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b05      	cmp	r3, #5
 800252e:	d115      	bne.n	800255c <HAL_RCC_OscConfig+0x50c>
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002536:	4a07      	ldr	r2, [pc, #28]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 8002538:	f043 0304 	orr.w	r3, r3, #4
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	4a03      	ldr	r2, [pc, #12]	; (8002554 <HAL_RCC_OscConfig+0x504>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002550:	e014      	b.n	800257c <HAL_RCC_OscConfig+0x52c>
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	40007000 	.word	0x40007000
 800255c:	4b9d      	ldr	r3, [pc, #628]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	4a9c      	ldr	r2, [pc, #624]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800256c:	4b99      	ldr	r3, [pc, #612]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002572:	4a98      	ldr	r2, [pc, #608]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d016      	beq.n	80025b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7fe f944 	bl	8000810 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258c:	f7fe f940 	bl	8000810 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e168      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a2:	4b8c      	ldr	r3, [pc, #560]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ed      	beq.n	800258c <HAL_RCC_OscConfig+0x53c>
 80025b0:	e015      	b.n	80025de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b2:	f7fe f92d 	bl	8000810 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe f929 	bl	8000810 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e151      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025d0:	4b80      	ldr	r3, [pc, #512]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1ed      	bne.n	80025ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025de:	7ffb      	ldrb	r3, [r7, #31]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d105      	bne.n	80025f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e4:	4b7b      	ldr	r3, [pc, #492]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	4a7a      	ldr	r2, [pc, #488]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 80025ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d03c      	beq.n	8002676 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01c      	beq.n	800263e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002604:	4b73      	ldr	r3, [pc, #460]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 8002606:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800260a:	4a72      	ldr	r2, [pc, #456]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002614:	f7fe f8fc 	bl	8000810 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800261c:	f7fe f8f8 	bl	8000810 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e122      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800262e:	4b69      	ldr	r3, [pc, #420]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 8002630:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0ef      	beq.n	800261c <HAL_RCC_OscConfig+0x5cc>
 800263c:	e01b      	b.n	8002676 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800263e:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 8002640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002644:	4a63      	ldr	r2, [pc, #396]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 8002646:	f023 0301 	bic.w	r3, r3, #1
 800264a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7fe f8df 	bl	8000810 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002656:	f7fe f8db 	bl	8000810 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e105      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002668:	4b5a      	ldr	r3, [pc, #360]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 800266a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ef      	bne.n	8002656 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80f9 	beq.w	8002872 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	2b02      	cmp	r3, #2
 8002686:	f040 80cf 	bne.w	8002828 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800268a:	4b52      	ldr	r3, [pc, #328]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f003 0203 	and.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269a:	429a      	cmp	r2, r3
 800269c:	d12c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	3b01      	subs	r3, #1
 80026aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d123      	bne.n	80026f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d11b      	bne.n	80026f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d113      	bne.n	80026f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	085b      	lsrs	r3, r3, #1
 80026dc:	3b01      	subs	r3, #1
 80026de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d109      	bne.n	80026f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	085b      	lsrs	r3, r3, #1
 80026f0:	3b01      	subs	r3, #1
 80026f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d071      	beq.n	80027dc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d068      	beq.n	80027d0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026fe:	4b35      	ldr	r3, [pc, #212]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800270a:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0ac      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800271a:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a2d      	ldr	r2, [pc, #180]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 8002720:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002724:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002726:	f7fe f873 	bl	8000810 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272e:	f7fe f86f 	bl	8000810 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e099      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002740:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800274c:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <HAL_RCC_OscConfig+0x788>)
 8002752:	4013      	ands	r3, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800275c:	3a01      	subs	r2, #1
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	4311      	orrs	r1, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002766:	0212      	lsls	r2, r2, #8
 8002768:	4311      	orrs	r1, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800276e:	0852      	lsrs	r2, r2, #1
 8002770:	3a01      	subs	r2, #1
 8002772:	0552      	lsls	r2, r2, #21
 8002774:	4311      	orrs	r1, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800277a:	0852      	lsrs	r2, r2, #1
 800277c:	3a01      	subs	r2, #1
 800277e:	0652      	lsls	r2, r2, #25
 8002780:	4311      	orrs	r1, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002786:	06d2      	lsls	r2, r2, #27
 8002788:	430a      	orrs	r2, r1
 800278a:	4912      	ldr	r1, [pc, #72]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 800278c:	4313      	orrs	r3, r2
 800278e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002790:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 8002796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800279a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800279c:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 80027a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027a8:	f7fe f832 	bl	8000810 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7fe f82e 	bl	8000810 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e058      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c2:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <HAL_RCC_OscConfig+0x784>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ce:	e050      	b.n	8002872 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e04f      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
 80027d4:	40021000 	.word	0x40021000
 80027d8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_RCC_OscConfig+0x82c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d144      	bne.n	8002872 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027e8:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_RCC_OscConfig+0x82c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a23      	ldr	r2, [pc, #140]	; (800287c <HAL_RCC_OscConfig+0x82c>)
 80027ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <HAL_RCC_OscConfig+0x82c>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	4a20      	ldr	r2, [pc, #128]	; (800287c <HAL_RCC_OscConfig+0x82c>)
 80027fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002800:	f7fe f806 	bl	8000810 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe f802 	bl	8000810 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e02c      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <HAL_RCC_OscConfig+0x82c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x7b8>
 8002826:	e024      	b.n	8002872 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d01f      	beq.n	800286e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <HAL_RCC_OscConfig+0x82c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <HAL_RCC_OscConfig+0x82c>)
 8002834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fd ffe9 	bl	8000810 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002842:	f7fd ffe5 	bl	8000810 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e00f      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_RCC_OscConfig+0x82c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_RCC_OscConfig+0x82c>)
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	4905      	ldr	r1, [pc, #20]	; (800287c <HAL_RCC_OscConfig+0x82c>)
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_RCC_OscConfig+0x830>)
 8002868:	4013      	ands	r3, r2
 800286a:	60cb      	str	r3, [r1, #12]
 800286c:	e001      	b.n	8002872 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3720      	adds	r7, #32
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	feeefffc 	.word	0xfeeefffc

08002884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e11d      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800289c:	4b90      	ldr	r3, [pc, #576]	; (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d910      	bls.n	80028cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b8d      	ldr	r3, [pc, #564]	; (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 020f 	bic.w	r2, r3, #15
 80028b2:	498b      	ldr	r1, [pc, #556]	; (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	4b89      	ldr	r3, [pc, #548]	; (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e105      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d010      	beq.n	80028fa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	4b81      	ldr	r3, [pc, #516]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d908      	bls.n	80028fa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e8:	4b7e      	ldr	r3, [pc, #504]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	497b      	ldr	r1, [pc, #492]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d079      	beq.n	80029fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d11e      	bne.n	800294c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290e:	4b75      	ldr	r3, [pc, #468]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e0dc      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800291e:	f000 f9d1 	bl	8002cc4 <RCC_GetSysClockFreqFromPLLSource>
 8002922:	4603      	mov	r3, r0
 8002924:	4a70      	ldr	r2, [pc, #448]	; (8002ae8 <HAL_RCC_ClockConfig+0x264>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d946      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800292a:	4b6e      	ldr	r3, [pc, #440]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d140      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002936:	4b6b      	ldr	r3, [pc, #428]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800293e:	4a69      	ldr	r2, [pc, #420]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002944:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	e035      	b.n	80029b8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d107      	bne.n	8002964 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002954:	4b63      	ldr	r3, [pc, #396]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d115      	bne.n	800298c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0b9      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d107      	bne.n	800297c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800296c:	4b5d      	ldr	r3, [pc, #372]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d109      	bne.n	800298c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0ad      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800297c:	4b59      	ldr	r3, [pc, #356]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0a5      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800298c:	f000 f8b4 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8002990:	4603      	mov	r3, r0
 8002992:	4a55      	ldr	r2, [pc, #340]	; (8002ae8 <HAL_RCC_ClockConfig+0x264>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d90f      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002998:	4b52      	ldr	r3, [pc, #328]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d109      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029a4:	4b4f      	ldr	r3, [pc, #316]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ac:	4a4d      	ldr	r2, [pc, #308]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 80029ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029b8:	4b4a      	ldr	r3, [pc, #296]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f023 0203 	bic.w	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4947      	ldr	r1, [pc, #284]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ca:	f7fd ff21 	bl	8000810 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d2:	f7fd ff1d 	bl	8000810 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e077      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e8:	4b3e      	ldr	r3, [pc, #248]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 020c 	and.w	r2, r3, #12
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d1eb      	bne.n	80029d2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b80      	cmp	r3, #128	; 0x80
 80029fe:	d105      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a00:	4b38      	ldr	r3, [pc, #224]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a37      	ldr	r2, [pc, #220]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d010      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d208      	bcs.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a28:	4b2e      	ldr	r3, [pc, #184]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	492b      	ldr	r1, [pc, #172]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3a:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d210      	bcs.n	8002a6a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 020f 	bic.w	r2, r3, #15
 8002a50:	4923      	ldr	r1, [pc, #140]	; (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a58:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d001      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e036      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a76:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4918      	ldr	r1, [pc, #96]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4910      	ldr	r1, [pc, #64]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aa8:	f000 f826 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	490c      	ldr	r1, [pc, #48]	; (8002aec <HAL_RCC_ClockConfig+0x268>)
 8002aba:	5ccb      	ldrb	r3, [r1, r3]
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_RCC_ClockConfig+0x26c>)
 8002ac6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_RCC_ClockConfig+0x270>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fe4f 	bl	8000770 <HAL_InitTick>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	73fb      	strb	r3, [r7, #15]

  return status;
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	04c4b400 	.word	0x04c4b400
 8002aec:	08003830 	.word	0x08003830
 8002af0:	20000000 	.word	0x20000000
 8002af4:	20000004 	.word	0x20000004

08002af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	; 0x24
 8002afc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b06:	4b3e      	ldr	r3, [pc, #248]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b10:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x34>
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	d121      	bne.n	8002b6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d11e      	bne.n	8002b6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b2c:	4b34      	ldr	r3, [pc, #208]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d107      	bne.n	8002b48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b38:	4b31      	ldr	r3, [pc, #196]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	e005      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b48:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b54:	4a2b      	ldr	r2, [pc, #172]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10d      	bne.n	8002b80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b68:	e00a      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d102      	bne.n	8002b76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b72:	61bb      	str	r3, [r7, #24]
 8002b74:	e004      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b7c:	4b23      	ldr	r3, [pc, #140]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x114>)
 8002b7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	d134      	bne.n	8002bf0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b86:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d003      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xac>
 8002b9c:	e005      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ba0:	617b      	str	r3, [r7, #20]
      break;
 8002ba2:	e005      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ba6:	617b      	str	r3, [r7, #20]
      break;
 8002ba8:	e002      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	617b      	str	r3, [r7, #20]
      break;
 8002bae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	3301      	adds	r3, #1
 8002bbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bbe:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	fb03 f202 	mul.w	r2, r3, r2
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	0e5b      	lsrs	r3, r3, #25
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	3301      	adds	r3, #1
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bf0:	69bb      	ldr	r3, [r7, #24]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3724      	adds	r7, #36	; 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	08003840 	.word	0x08003840
 8002c08:	00f42400 	.word	0x00f42400
 8002c0c:	007a1200 	.word	0x007a1200

08002c10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c1c:	4b27      	ldr	r3, [pc, #156]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c28:	f7ff f94e 	bl	8001ec8 <HAL_PWREx_GetVoltageRange>
 8002c2c:	6178      	str	r0, [r7, #20]
 8002c2e:	e014      	b.n	8002c5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c30:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	4a21      	ldr	r2, [pc, #132]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c3c:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c48:	f7ff f93e 	bl	8001ec8 <HAL_PWREx_GetVoltageRange>
 8002c4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c52:	4a1a      	ldr	r2, [pc, #104]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c60:	d10b      	bne.n	8002c7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b80      	cmp	r3, #128	; 0x80
 8002c66:	d913      	bls.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c6c:	d902      	bls.n	8002c74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c6e:	2302      	movs	r3, #2
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	e00d      	b.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c74:	2301      	movs	r3, #1
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	e00a      	b.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b7f      	cmp	r3, #127	; 0x7f
 8002c7e:	d902      	bls.n	8002c86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002c80:	2302      	movs	r3, #2
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	e004      	b.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b70      	cmp	r3, #112	; 0x70
 8002c8a:	d101      	bne.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 020f 	bic.w	r2, r3, #15
 8002c98:	4909      	ldr	r1, [pc, #36]	; (8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d001      	beq.n	8002cb2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40022000 	.word	0x40022000

08002cc4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cca:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d00b      	beq.n	8002cf2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d825      	bhi.n	8002d2c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d008      	beq.n	8002cf8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d11f      	bne.n	8002d2c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002cee:	613b      	str	r3, [r7, #16]
    break;
 8002cf0:	e01f      	b.n	8002d32 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002cf2:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002cf4:	613b      	str	r3, [r7, #16]
    break;
 8002cf6:	e01c      	b.n	8002d32 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d107      	bne.n	8002d14 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d04:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	e005      	b.n	8002d20 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d14:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002d20:	4a1a      	ldr	r2, [pc, #104]	; (8002d8c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d28:	613b      	str	r3, [r7, #16]
    break;
 8002d2a:	e002      	b.n	8002d32 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
    break;
 8002d30:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d32:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	091b      	lsrs	r3, r3, #4
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	fb03 f202 	mul.w	r2, r3, r2
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d56:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	0e5b      	lsrs	r3, r3, #25
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	3301      	adds	r3, #1
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002d72:	683b      	ldr	r3, [r7, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40021000 	.word	0x40021000
 8002d84:	00f42400 	.word	0x00f42400
 8002d88:	007a1200 	.word	0x007a1200
 8002d8c:	08003840 	.word	0x08003840

08002d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d98:	2300      	movs	r3, #0
 8002d9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d040      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db0:	2b80      	cmp	r3, #128	; 0x80
 8002db2:	d02a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002db4:	2b80      	cmp	r3, #128	; 0x80
 8002db6:	d825      	bhi.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002db8:	2b60      	cmp	r3, #96	; 0x60
 8002dba:	d026      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002dbc:	2b60      	cmp	r3, #96	; 0x60
 8002dbe:	d821      	bhi.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002dc0:	2b40      	cmp	r3, #64	; 0x40
 8002dc2:	d006      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002dc4:	2b40      	cmp	r3, #64	; 0x40
 8002dc6:	d81d      	bhi.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d010      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002dd0:	e018      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dd2:	4b89      	ldr	r3, [pc, #548]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	4a88      	ldr	r2, [pc, #544]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dde:	e015      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3304      	adds	r3, #4
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fb02 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002df0:	e00c      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3320      	adds	r3, #32
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fbed 	bl	80035d8 <RCCEx_PLLSAI2_Config>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e02:	e003      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	74fb      	strb	r3, [r7, #19]
      break;
 8002e08:	e000      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10b      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e12:	4b79      	ldr	r3, [pc, #484]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e18:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e20:	4975      	ldr	r1, [pc, #468]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e28:	e001      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d047      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e42:	d030      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e48:	d82a      	bhi.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e4e:	d02a      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e54:	d824      	bhi.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e5a:	d008      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e60:	d81e      	bhi.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e6a:	d010      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e6c:	e018      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e6e:	4b62      	ldr	r3, [pc, #392]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4a61      	ldr	r2, [pc, #388]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e78:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e7a:	e015      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fab4 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e8c:	e00c      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3320      	adds	r3, #32
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fb9f 	bl	80035d8 <RCCEx_PLLSAI2_Config>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e9e:	e003      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	74fb      	strb	r3, [r7, #19]
      break;
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10b      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eae:	4b52      	ldr	r3, [pc, #328]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	494e      	ldr	r1, [pc, #312]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002ec4:	e001      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec6:	7cfb      	ldrb	r3, [r7, #19]
 8002ec8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 809f 	beq.w	8003016 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002edc:	4b46      	ldr	r3, [pc, #280]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002eec:	2300      	movs	r3, #0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00d      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	4a40      	ldr	r2, [pc, #256]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efc:	6593      	str	r3, [r2, #88]	; 0x58
 8002efe:	4b3e      	ldr	r3, [pc, #248]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a3a      	ldr	r2, [pc, #232]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f1a:	f7fd fc79 	bl	8000810 <HAL_GetTick>
 8002f1e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f20:	e009      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f22:	f7fd fc75 	bl	8000810 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d902      	bls.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	74fb      	strb	r3, [r7, #19]
        break;
 8002f34:	e005      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f36:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0ef      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002f42:	7cfb      	ldrb	r3, [r7, #19]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d15b      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f52:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d01f      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d019      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f66:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f70:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f72:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f78:	4a1f      	ldr	r2, [pc, #124]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f82:	4b1d      	ldr	r3, [pc, #116]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f92:	4a19      	ldr	r2, [pc, #100]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d016      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fd fc34 	bl	8000810 <HAL_GetTick>
 8002fa8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fac:	f7fd fc30 	bl	8000810 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d902      	bls.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	74fb      	strb	r3, [r7, #19]
            break;
 8002fc2:	e006      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0ec      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002fd2:	7cfb      	ldrb	r3, [r7, #19]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10c      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fd8:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	4903      	ldr	r1, [pc, #12]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ff0:	e008      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ff2:	7cfb      	ldrb	r3, [r7, #19]
 8002ff4:	74bb      	strb	r3, [r7, #18]
 8002ff6:	e005      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003004:	7c7b      	ldrb	r3, [r7, #17]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d105      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800300a:	4ba0      	ldr	r3, [pc, #640]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300e:	4a9f      	ldr	r2, [pc, #636]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003014:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003022:	4b9a      	ldr	r3, [pc, #616]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003028:	f023 0203 	bic.w	r2, r3, #3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	4996      	ldr	r1, [pc, #600]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003044:	4b91      	ldr	r3, [pc, #580]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f023 020c 	bic.w	r2, r3, #12
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	498e      	ldr	r1, [pc, #568]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003066:	4b89      	ldr	r3, [pc, #548]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	4985      	ldr	r1, [pc, #532]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003088:	4b80      	ldr	r3, [pc, #512]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003096:	497d      	ldr	r1, [pc, #500]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030aa:	4b78      	ldr	r3, [pc, #480]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b8:	4974      	ldr	r1, [pc, #464]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030cc:	4b6f      	ldr	r3, [pc, #444]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030da:	496c      	ldr	r1, [pc, #432]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ee:	4b67      	ldr	r3, [pc, #412]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030fc:	4963      	ldr	r1, [pc, #396]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003110:	4b5e      	ldr	r3, [pc, #376]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003116:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800311e:	495b      	ldr	r1, [pc, #364]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003132:	4b56      	ldr	r3, [pc, #344]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003138:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003140:	4952      	ldr	r1, [pc, #328]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003154:	4b4d      	ldr	r3, [pc, #308]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	494a      	ldr	r1, [pc, #296]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003176:	4b45      	ldr	r3, [pc, #276]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	4941      	ldr	r1, [pc, #260]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003198:	4b3c      	ldr	r3, [pc, #240]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800319a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800319e:	f023 0203 	bic.w	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a6:	4939      	ldr	r1, [pc, #228]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d028      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ba:	4b34      	ldr	r3, [pc, #208]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c8:	4930      	ldr	r1, [pc, #192]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031d8:	d106      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031da:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	4a2b      	ldr	r2, [pc, #172]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031e4:	60d3      	str	r3, [r2, #12]
 80031e6:	e011      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031f0:	d10c      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3304      	adds	r3, #4
 80031f6:	2101      	movs	r1, #1
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 f8f9 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 80031fe:	4603      	mov	r3, r0
 8003200:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003202:	7cfb      	ldrb	r3, [r7, #19]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d04d      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800321c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003220:	d108      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003222:	4b1a      	ldr	r3, [pc, #104]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003224:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003228:	4a18      	ldr	r2, [pc, #96]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800322a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800322e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003232:	e012      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003234:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800323a:	4a14      	ldr	r2, [pc, #80]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003240:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003252:	490e      	ldr	r1, [pc, #56]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800325e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003262:	d106      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a08      	ldr	r2, [pc, #32]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800326a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800326e:	60d3      	str	r3, [r2, #12]
 8003270:	e020      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003276:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800327a:	d109      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4a02      	ldr	r2, [pc, #8]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003286:	60d3      	str	r3, [r2, #12]
 8003288:	e014      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003298:	d10c      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3304      	adds	r3, #4
 800329e:	2101      	movs	r1, #1
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 f8a5 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 80032a6:	4603      	mov	r3, r0
 80032a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032aa:	7cfb      	ldrb	r3, [r7, #19]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80032b0:	7cfb      	ldrb	r3, [r7, #19]
 80032b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d028      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032c0:	4b4a      	ldr	r3, [pc, #296]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ce:	4947      	ldr	r1, [pc, #284]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032de:	d106      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e0:	4b42      	ldr	r3, [pc, #264]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4a41      	ldr	r2, [pc, #260]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ea:	60d3      	str	r3, [r2, #12]
 80032ec:	e011      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032f6:	d10c      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	2101      	movs	r1, #1
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f876 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d01e      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800331e:	4b33      	ldr	r3, [pc, #204]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800332e:	492f      	ldr	r1, [pc, #188]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800333c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003340:	d10c      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3304      	adds	r3, #4
 8003346:	2102      	movs	r1, #2
 8003348:	4618      	mov	r0, r3
 800334a:	f000 f851 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003352:	7cfb      	ldrb	r3, [r7, #19]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00b      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003368:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800336a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800336e:	f023 0204 	bic.w	r2, r3, #4
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003378:	491c      	ldr	r1, [pc, #112]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800338c:	4b17      	ldr	r3, [pc, #92]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800338e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003392:	f023 0218 	bic.w	r2, r3, #24
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339c:	4913      	ldr	r1, [pc, #76]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d017      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80033b0:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c0:	490a      	ldr	r1, [pc, #40]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033d2:	d105      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4a04      	ldr	r2, [pc, #16]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000

080033f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033fe:	4b72      	ldr	r3, [pc, #456]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00e      	beq.n	8003428 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800340a:	4b6f      	ldr	r3, [pc, #444]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0203 	and.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d103      	bne.n	8003422 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
       ||
 800341e:	2b00      	cmp	r3, #0
 8003420:	d142      	bne.n	80034a8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	73fb      	strb	r3, [r7, #15]
 8003426:	e03f      	b.n	80034a8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b03      	cmp	r3, #3
 800342e:	d018      	beq.n	8003462 <RCCEx_PLLSAI1_Config+0x72>
 8003430:	2b03      	cmp	r3, #3
 8003432:	d825      	bhi.n	8003480 <RCCEx_PLLSAI1_Config+0x90>
 8003434:	2b01      	cmp	r3, #1
 8003436:	d002      	beq.n	800343e <RCCEx_PLLSAI1_Config+0x4e>
 8003438:	2b02      	cmp	r3, #2
 800343a:	d009      	beq.n	8003450 <RCCEx_PLLSAI1_Config+0x60>
 800343c:	e020      	b.n	8003480 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800343e:	4b62      	ldr	r3, [pc, #392]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d11d      	bne.n	8003486 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800344e:	e01a      	b.n	8003486 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003450:	4b5d      	ldr	r3, [pc, #372]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d116      	bne.n	800348a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003460:	e013      	b.n	800348a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003462:	4b59      	ldr	r3, [pc, #356]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10f      	bne.n	800348e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800346e:	4b56      	ldr	r3, [pc, #344]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800347e:	e006      	b.n	800348e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
      break;
 8003484:	e004      	b.n	8003490 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003486:	bf00      	nop
 8003488:	e002      	b.n	8003490 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800348a:	bf00      	nop
 800348c:	e000      	b.n	8003490 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800348e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003496:	4b4c      	ldr	r3, [pc, #304]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f023 0203 	bic.w	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4949      	ldr	r1, [pc, #292]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 8086 	bne.w	80035bc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034b0:	4b45      	ldr	r3, [pc, #276]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a44      	ldr	r2, [pc, #272]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034bc:	f7fd f9a8 	bl	8000810 <HAL_GetTick>
 80034c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034c2:	e009      	b.n	80034d8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034c4:	f7fd f9a4 	bl	8000810 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d902      	bls.n	80034d8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	73fb      	strb	r3, [r7, #15]
        break;
 80034d6:	e005      	b.n	80034e4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034d8:	4b3b      	ldr	r3, [pc, #236]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ef      	bne.n	80034c4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d168      	bne.n	80035bc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d113      	bne.n	8003518 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034f0:	4b35      	ldr	r3, [pc, #212]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	4b35      	ldr	r3, [pc, #212]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6892      	ldr	r2, [r2, #8]
 80034fc:	0211      	lsls	r1, r2, #8
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68d2      	ldr	r2, [r2, #12]
 8003502:	06d2      	lsls	r2, r2, #27
 8003504:	4311      	orrs	r1, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6852      	ldr	r2, [r2, #4]
 800350a:	3a01      	subs	r2, #1
 800350c:	0112      	lsls	r2, r2, #4
 800350e:	430a      	orrs	r2, r1
 8003510:	492d      	ldr	r1, [pc, #180]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003512:	4313      	orrs	r3, r2
 8003514:	610b      	str	r3, [r1, #16]
 8003516:	e02d      	b.n	8003574 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d115      	bne.n	800354a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800351e:	4b2a      	ldr	r3, [pc, #168]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003524:	4013      	ands	r3, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6892      	ldr	r2, [r2, #8]
 800352a:	0211      	lsls	r1, r2, #8
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6912      	ldr	r2, [r2, #16]
 8003530:	0852      	lsrs	r2, r2, #1
 8003532:	3a01      	subs	r2, #1
 8003534:	0552      	lsls	r2, r2, #21
 8003536:	4311      	orrs	r1, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6852      	ldr	r2, [r2, #4]
 800353c:	3a01      	subs	r2, #1
 800353e:	0112      	lsls	r2, r2, #4
 8003540:	430a      	orrs	r2, r1
 8003542:	4921      	ldr	r1, [pc, #132]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003544:	4313      	orrs	r3, r2
 8003546:	610b      	str	r3, [r1, #16]
 8003548:	e014      	b.n	8003574 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800354a:	4b1f      	ldr	r3, [pc, #124]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003550:	4013      	ands	r3, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6892      	ldr	r2, [r2, #8]
 8003556:	0211      	lsls	r1, r2, #8
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6952      	ldr	r2, [r2, #20]
 800355c:	0852      	lsrs	r2, r2, #1
 800355e:	3a01      	subs	r2, #1
 8003560:	0652      	lsls	r2, r2, #25
 8003562:	4311      	orrs	r1, r2
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6852      	ldr	r2, [r2, #4]
 8003568:	3a01      	subs	r2, #1
 800356a:	0112      	lsls	r2, r2, #4
 800356c:	430a      	orrs	r2, r1
 800356e:	4916      	ldr	r1, [pc, #88]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003570:	4313      	orrs	r3, r2
 8003572:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003574:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800357a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800357e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003580:	f7fd f946 	bl	8000810 <HAL_GetTick>
 8003584:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003586:	e009      	b.n	800359c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003588:	f7fd f942 	bl	8000810 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d902      	bls.n	800359c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	73fb      	strb	r3, [r7, #15]
          break;
 800359a:	e005      	b.n	80035a8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ef      	beq.n	8003588 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035ae:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	4904      	ldr	r1, [pc, #16]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000
 80035cc:	07ff800f 	.word	0x07ff800f
 80035d0:	ff9f800f 	.word	0xff9f800f
 80035d4:	f9ff800f 	.word	0xf9ff800f

080035d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035e6:	4b72      	ldr	r3, [pc, #456]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00e      	beq.n	8003610 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035f2:	4b6f      	ldr	r3, [pc, #444]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0203 	and.w	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d103      	bne.n	800360a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
       ||
 8003606:	2b00      	cmp	r3, #0
 8003608:	d142      	bne.n	8003690 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	73fb      	strb	r3, [r7, #15]
 800360e:	e03f      	b.n	8003690 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b03      	cmp	r3, #3
 8003616:	d018      	beq.n	800364a <RCCEx_PLLSAI2_Config+0x72>
 8003618:	2b03      	cmp	r3, #3
 800361a:	d825      	bhi.n	8003668 <RCCEx_PLLSAI2_Config+0x90>
 800361c:	2b01      	cmp	r3, #1
 800361e:	d002      	beq.n	8003626 <RCCEx_PLLSAI2_Config+0x4e>
 8003620:	2b02      	cmp	r3, #2
 8003622:	d009      	beq.n	8003638 <RCCEx_PLLSAI2_Config+0x60>
 8003624:	e020      	b.n	8003668 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003626:	4b62      	ldr	r3, [pc, #392]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d11d      	bne.n	800366e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003636:	e01a      	b.n	800366e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003638:	4b5d      	ldr	r3, [pc, #372]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003640:	2b00      	cmp	r3, #0
 8003642:	d116      	bne.n	8003672 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003648:	e013      	b.n	8003672 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800364a:	4b59      	ldr	r3, [pc, #356]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10f      	bne.n	8003676 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003656:	4b56      	ldr	r3, [pc, #344]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003666:	e006      	b.n	8003676 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      break;
 800366c:	e004      	b.n	8003678 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800366e:	bf00      	nop
 8003670:	e002      	b.n	8003678 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003676:	bf00      	nop
    }

    if(status == HAL_OK)
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d108      	bne.n	8003690 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800367e:	4b4c      	ldr	r3, [pc, #304]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f023 0203 	bic.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4949      	ldr	r1, [pc, #292]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800368c:	4313      	orrs	r3, r2
 800368e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f040 8086 	bne.w	80037a4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003698:	4b45      	ldr	r3, [pc, #276]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a44      	ldr	r2, [pc, #272]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800369e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a4:	f7fd f8b4 	bl	8000810 <HAL_GetTick>
 80036a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036aa:	e009      	b.n	80036c0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036ac:	f7fd f8b0 	bl	8000810 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d902      	bls.n	80036c0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	73fb      	strb	r3, [r7, #15]
        break;
 80036be:	e005      	b.n	80036cc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036c0:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1ef      	bne.n	80036ac <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d168      	bne.n	80037a4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d113      	bne.n	8003700 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036d8:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	4b35      	ldr	r3, [pc, #212]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80036de:	4013      	ands	r3, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6892      	ldr	r2, [r2, #8]
 80036e4:	0211      	lsls	r1, r2, #8
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68d2      	ldr	r2, [r2, #12]
 80036ea:	06d2      	lsls	r2, r2, #27
 80036ec:	4311      	orrs	r1, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6852      	ldr	r2, [r2, #4]
 80036f2:	3a01      	subs	r2, #1
 80036f4:	0112      	lsls	r2, r2, #4
 80036f6:	430a      	orrs	r2, r1
 80036f8:	492d      	ldr	r1, [pc, #180]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	614b      	str	r3, [r1, #20]
 80036fe:	e02d      	b.n	800375c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d115      	bne.n	8003732 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003706:	4b2a      	ldr	r3, [pc, #168]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800370c:	4013      	ands	r3, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6892      	ldr	r2, [r2, #8]
 8003712:	0211      	lsls	r1, r2, #8
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6912      	ldr	r2, [r2, #16]
 8003718:	0852      	lsrs	r2, r2, #1
 800371a:	3a01      	subs	r2, #1
 800371c:	0552      	lsls	r2, r2, #21
 800371e:	4311      	orrs	r1, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6852      	ldr	r2, [r2, #4]
 8003724:	3a01      	subs	r2, #1
 8003726:	0112      	lsls	r2, r2, #4
 8003728:	430a      	orrs	r2, r1
 800372a:	4921      	ldr	r1, [pc, #132]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800372c:	4313      	orrs	r3, r2
 800372e:	614b      	str	r3, [r1, #20]
 8003730:	e014      	b.n	800375c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003732:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	4b21      	ldr	r3, [pc, #132]	; (80037bc <RCCEx_PLLSAI2_Config+0x1e4>)
 8003738:	4013      	ands	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6892      	ldr	r2, [r2, #8]
 800373e:	0211      	lsls	r1, r2, #8
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6952      	ldr	r2, [r2, #20]
 8003744:	0852      	lsrs	r2, r2, #1
 8003746:	3a01      	subs	r2, #1
 8003748:	0652      	lsls	r2, r2, #25
 800374a:	4311      	orrs	r1, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6852      	ldr	r2, [r2, #4]
 8003750:	3a01      	subs	r2, #1
 8003752:	0112      	lsls	r2, r2, #4
 8003754:	430a      	orrs	r2, r1
 8003756:	4916      	ldr	r1, [pc, #88]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003758:	4313      	orrs	r3, r2
 800375a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800375c:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003766:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fd f852 	bl	8000810 <HAL_GetTick>
 800376c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800376e:	e009      	b.n	8003784 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003770:	f7fd f84e 	bl	8000810 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d902      	bls.n	8003784 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	73fb      	strb	r3, [r7, #15]
          break;
 8003782:	e005      	b.n	8003790 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ef      	beq.n	8003770 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	4904      	ldr	r1, [pc, #16]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000
 80037b4:	07ff800f 	.word	0x07ff800f
 80037b8:	ff9f800f 	.word	0xff9f800f
 80037bc:	f9ff800f 	.word	0xf9ff800f

080037c0 <__libc_init_array>:
 80037c0:	b570      	push	{r4, r5, r6, lr}
 80037c2:	4d0d      	ldr	r5, [pc, #52]	; (80037f8 <__libc_init_array+0x38>)
 80037c4:	4c0d      	ldr	r4, [pc, #52]	; (80037fc <__libc_init_array+0x3c>)
 80037c6:	1b64      	subs	r4, r4, r5
 80037c8:	10a4      	asrs	r4, r4, #2
 80037ca:	2600      	movs	r6, #0
 80037cc:	42a6      	cmp	r6, r4
 80037ce:	d109      	bne.n	80037e4 <__libc_init_array+0x24>
 80037d0:	4d0b      	ldr	r5, [pc, #44]	; (8003800 <__libc_init_array+0x40>)
 80037d2:	4c0c      	ldr	r4, [pc, #48]	; (8003804 <__libc_init_array+0x44>)
 80037d4:	f000 f820 	bl	8003818 <_init>
 80037d8:	1b64      	subs	r4, r4, r5
 80037da:	10a4      	asrs	r4, r4, #2
 80037dc:	2600      	movs	r6, #0
 80037de:	42a6      	cmp	r6, r4
 80037e0:	d105      	bne.n	80037ee <__libc_init_array+0x2e>
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e8:	4798      	blx	r3
 80037ea:	3601      	adds	r6, #1
 80037ec:	e7ee      	b.n	80037cc <__libc_init_array+0xc>
 80037ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f2:	4798      	blx	r3
 80037f4:	3601      	adds	r6, #1
 80037f6:	e7f2      	b.n	80037de <__libc_init_array+0x1e>
 80037f8:	08003870 	.word	0x08003870
 80037fc:	08003870 	.word	0x08003870
 8003800:	08003870 	.word	0x08003870
 8003804:	08003874 	.word	0x08003874

08003808 <memset>:
 8003808:	4402      	add	r2, r0
 800380a:	4603      	mov	r3, r0
 800380c:	4293      	cmp	r3, r2
 800380e:	d100      	bne.n	8003812 <memset+0xa>
 8003810:	4770      	bx	lr
 8003812:	f803 1b01 	strb.w	r1, [r3], #1
 8003816:	e7f9      	b.n	800380c <memset+0x4>

08003818 <_init>:
 8003818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381a:	bf00      	nop
 800381c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381e:	bc08      	pop	{r3}
 8003820:	469e      	mov	lr, r3
 8003822:	4770      	bx	lr

08003824 <_fini>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	bf00      	nop
 8003828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382a:	bc08      	pop	{r3}
 800382c:	469e      	mov	lr, r3
 800382e:	4770      	bx	lr
